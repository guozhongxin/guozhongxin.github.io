<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>guozhongxin's blog</title><link>http://www.guozhongxin.com/</link><description></description><atom:link href="http://www.guozhongxin.com/feeds/python.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 12 Oct 2014 21:00:00 +0800</lastBuildDate><item><title>Spark简介</title><link>http://www.guozhongxin.com/pages/2014/10/12/a_brief_in_spark.html</link><description>&lt;h1&gt;目录：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Spark综述&lt;/li&gt;
&lt;li&gt;Spark计算模型：RDD，算子，stage，&lt;/li&gt;
&lt;li&gt;Spark架构及工作流程&lt;/li&gt;
&lt;li&gt;Spark组件&lt;/li&gt;
&lt;li&gt;Spark配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Spark综述--Spark是什么&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;基于内存的分布式并行计算框架&lt;/li&gt;
&lt;li&gt;一种粗粒度数据并行（data parallel）的计算范式（相对于 task parallel）&lt;/li&gt;
&lt;li&gt;以RDD(弹性分布式数据集)为计算对象&lt;/li&gt;
&lt;li&gt;核心代码两万行，轻量级分布式系统&lt;/li&gt;
&lt;li&gt;支持Hadoop2.0，支持HDFS&lt;/li&gt;
&lt;li&gt;支持内存计算、多迭代批量处理、即席查询、流处理和图计算  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Spark计算模型&lt;/h1&gt;
&lt;h3&gt;弹性的分布数据集(RDD)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分布式对象集合能够跨集群在内存中保存。多个并行操作，失败自动恢复。&lt;/li&gt;
&lt;li&gt;A list of partitions;&lt;/li&gt;
&lt;li&gt;A function for computing each split&lt;/li&gt;
&lt;li&gt;A list of dependencies on other RDDs: HadoopRDD，ShuffledRDD，PartitionPruningRDD…  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;算子&lt;/h3&gt;
&lt;p&gt;算子，即对数据集RDD进行操作的函数。&lt;br /&gt;
Spark计算模型中，总共涉及四种算子。    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入算子：val lines = sc.textFile("data.txt")&lt;/li&gt;
&lt;li&gt;缓存算子：lines.cache(), lines.persist()&lt;/li&gt;
&lt;li&gt;变换算子(Transformations)： create a new dataset from an existing one，由一个（或多个）已存在的RDD转换成另外一个RDD：map(), filter(), group(), flatmap()…&lt;/li&gt;
&lt;li&gt;行动算子(Actions)： return a value to the driver program after running a computation on the dataset，由RDD转换成：reduce(), count()…  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图可以较为清楚的理解四种算子：&lt;br /&gt;
&lt;img alt="1" src="http://www.guozhongxin.com/images/suanzi.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;算子的执行&lt;/h4&gt;
&lt;p&gt;从RDD到RDD的变换算子序列，一直在RDD空间发生。这里很重要的设计是&lt;code&gt;lazy evaluation&lt;/code&gt;：计算并不实际发生，只是不断地记录到元数据。元数据的结构是&lt;code&gt;DAG&lt;/code&gt;（有向无环图），其中每一个“顶点”是RDD（包括生产该RDD 的算子），从父RDD到子RDD有“边”，表示RDD间的依赖性。Spark给元数据DAG取了个很酷的名字，&lt;code&gt;Lineage&lt;/code&gt;（世系）。  &lt;/p&gt;
&lt;p&gt;Lineage一直增长，直到遇上行动（action）算子（图1中的绿色箭头），这时 就要evaluate了，把刚才累积的所有算子一次性执行。行动算子的输入是RDD（以及该RDD在Lineage上依赖的所有RDD），输出是执行后生 成的原生数据，可能是Scala标量、集合类型的数据或存储。当一个算子的输出是上述类型时，该算子必然是行动算子，其效果则是从RDD空间返回原生数据 空间。&lt;/p&gt;
&lt;p&gt;另一个要点是一旦行动算子产生原生数据，就必须退出RDD空间。因为目前Spark只能够跟踪RDD的计算，原生数据的计算对它来说是不可见的（除非以后 Spark会提供原生数据类型操作的重载、wrapper或implicit conversion）。&lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;shuffle（重排）&lt;/h4&gt;
&lt;p&gt;涉及重排，称为shuffle类操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对单个RDD重排，如sort、partitionBy（实现一致性的分区划分，这个对数据本地性优化很重要，后面会讲）；&lt;/li&gt;
&lt;li&gt;对单个RDD基于key进行重组和reduce，如groupByKey、reduceByKey；&lt;/li&gt;
&lt;li&gt;对两个RDD基于key进行join和重组，如join、cogroup。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;宽依赖与窄依赖&lt;/h3&gt;
&lt;p&gt;&lt;img alt="2" src="http://www.guozhongxin.com/images/dependency.png" /&gt;  &lt;/p&gt;
&lt;p&gt;左侧为窄依赖，右侧为宽依赖  &lt;/p&gt;
&lt;p&gt;宽依赖与窄依赖的最主要区别在于，宽依赖关系涉及到shuffle过程，而窄依赖不涉及shuffle。  &lt;/p&gt;
&lt;h3&gt;Stage&lt;/h3&gt;
&lt;p&gt;Stage是Spark对DAG的划分，以此作为对作业的进行任务（task）划分和调度的依据。&lt;br /&gt;
可以这样理解Stage不需要shuffle是可以随意并发的, 所以stage的边界就是需要shuffle的地方。&lt;/p&gt;
&lt;p&gt;下图是一个stage例子。
&lt;img alt="3" src="http://www.guozhongxin.com/images/stage.png" /&gt; &lt;/p&gt;
&lt;h3&gt;共享变量（Shared Variables）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;广播变量：&lt;br /&gt;
    允许程序员保留一个只读的变量，缓存在每一台机器上，而非每个任务。被创建后，它能在集群运行的任何函数上，需要被再次传递到这些结点上。
    通过SparkContext.broadcast(v)方法创建。
    对象v不能在被广播后修改，是只读的。&lt;/li&gt;
&lt;li&gt;累加器：&lt;br /&gt;
    通过调用SparkContext.accumulator(V)方法来创建。
    运行在集群上的任务，可以使用+=来加值。然而，它们不能读取计数器的值。
    当Driver程序可以使用.value方法读取该值&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Spark架构&lt;/h1&gt;
&lt;p&gt;先给一个概况图：&lt;br /&gt;
&lt;img alt="4" src="http://www.guozhongxin.com/images/jiagou.png" /&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建Spark Application运行环境；&lt;br /&gt;
    在Driver Program中新建SparkContext（包含sparkcontext的程序称为Driver Program）；
    Spark Application运行的表现方式为：在集群上运行着一组独立的executor进程，这些进程由sparkcontext来协调；&lt;/li&gt;
&lt;li&gt;SparkContext向资源管理器申请运行Executor资源，并启动StandaloneExecutorBackend，executor向sparkcontent申请task；
    集群通过SparkContext连接到不同的cluster manager(standalone、yarn、mesos)，cluster manager为运行应用的Executor分配资源；一旦连接建立之后，Spark每个Application就会获得各个节点上的Executor（进程）；每个Application都有自己独立的executor进程；Executor才是真正运行在WorkNode上的工作进程，它们为应用来计算或者存储数据；&lt;/li&gt;
&lt;li&gt;SparkContext获取到executor之后，Application的应用代码将会被发送到各个executor；&lt;/li&gt;
&lt;li&gt;SparkContext构建RDD DAG图，将RDD DAG图分解成Stage DAG图，将Stage提交给TaskScheduler，最后由TaskScheduler将Task发送给Executor运行；&lt;/li&gt;
&lt;li&gt;Task在Executor上运行，运行完毕后释放所有资源；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Spark通用的使用方式主要有两种：standalone、spark on yarn&lt;/p&gt;
&lt;h3&gt;standalone&lt;/h3&gt;
&lt;p&gt;基于standalone的Spark架构与作业执行流程（Driver运行在客户端上）：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="http://www.guozhongxin.com/images/standalone.png" /&gt; &lt;/p&gt;
&lt;p&gt;作业执行流程描述：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端启动后直接运行用户程序，启动Driver相关的工作：DAGScheduler和BlockManagerMaster等。&lt;/li&gt;
&lt;li&gt;客户端的Driver向Master注册。&lt;/li&gt;
&lt;li&gt;Master还会让Worker启动Exeuctor。Worker创建一个ExecutorRunner线程，ExecutorRunner会启动ExecutorBackend进程。&lt;/li&gt;
&lt;li&gt;ExecutorBackend启动后会向Driver的SchedulerBackend注册。Driver的DAGScheduler解析作业并生成相应的Stage，每个Stage包含的Task通过TaskScheduler分配给Executor执行。&lt;/li&gt;
&lt;li&gt;所有stage都完成后作业结束。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Spark on Yarn&lt;/h3&gt;
&lt;p&gt;基于Yarn的Spark架构与作业执行流程：&lt;br /&gt;
&lt;img alt="6" src="http://www.guozhongxin.com/images/taobao.png" /&gt; &lt;/p&gt;
&lt;p&gt;基于YARN的Spark作业首先由客户端生成作业信息，提交给ResourceManager，ResourceManager在某一NodeManager汇报时把AppMaster分配给NodeManager，NodeManager启动 SparkAppMaster，SparkAppMaster启动后初始化作业，然后向ResourceManager申请资源，申请到相应资源后 SparkAppMaster通过RPC让NodeManager启动相应的SparkExecutor，SparkExecutor向 SparkAppMaster汇报并完成相应的任务。此外，SparkClient会通过AppMaster获取作业运行状态。&lt;/p&gt;
&lt;p&gt;Spark on Yarn这种模式因为淘宝技术部在内部平台上的应用而被许多其他使用者模仿，其实根据笔者的感受来讲，绝大多数类型的任务spark着standalone的模式下就能很好的运行，并有不次于Spark on Yarn的执行效率。   &lt;/p&gt;
&lt;h1&gt;Spark组件&lt;/h1&gt;
&lt;h3&gt;DAGScheduler&lt;/h3&gt;
&lt;p&gt;DAGScheduler主要功能如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收用户提交的job;&lt;/li&gt;
&lt;li&gt;将job根据类型划分为不同的stage，记录哪些RDD、Stage被物化，并在每一个stage内产生一系列的task，并封装成TaskSet；&lt;/li&gt;
&lt;li&gt;决定每个Task的最佳位置(任务在数据所在的节点上运行)，并结合当前的缓存情况；将TaskSet提交给TaskScheduler;&lt;/li&gt;
&lt;li&gt;重新提交Shuffle输出丢失的Stage给TaskScheduler；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：一个Stage内部的错误不是由shuffle输出丢失造成的，DAGScheduler是不管的，由TaskScheduler负责尝试重新提交task执行；&lt;/p&gt;
&lt;h3&gt;TaskScheduler&lt;/h3&gt;
&lt;p&gt;TaskScheduler是一个可插拔任务调度接口，主要功能如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个TaskScheduler只为一个SparkContext服务，接收DAGScheduler提交过来的一组组的TaskSet；&lt;/li&gt;
&lt;li&gt;TaskScheduler将task提交到集群中并执行，如果其中某个Task执行失败则重试之；TaskScheduler将TaskSet对应的执行结果返回DAGScheduler；&lt;/li&gt;
&lt;li&gt;处理straggle任务；（比如：100个任务运行，其中99个任务快，1个任务慢，需要在另外一个节点上开启一个相同的任务来运行，谁先完成取用谁）；&lt;/li&gt;
&lt;li&gt;遇到shuffle输出丢失则汇报给DAGScheduler；&lt;/li&gt;
&lt;li&gt;为每个TaskSet维护一个TaskSetManager追踪本地性(resourceOffer--&amp;gt;findTask)及错误信息；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Storage模块&lt;/h3&gt;
&lt;p&gt;主要分为两层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信层：storage模块采用的是master-slave结构来实现通信层，master和slave之间传输控制信息、状态信息，这些都是通过通信层来实现的。&lt;/li&gt;
&lt;li&gt;存储层：storage模块需要把数据存储到disk或是memory上面，有可能还需replicate到远端，这都是由存储层来实现和提供相应接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他模块若要和storage模块进行交互，storage模块提供了统一的操作类BlockManager，外部类与storage模块打交道都需要通过调用BlockManager相应接口来实现&lt;/p&gt;
&lt;h1&gt;Spark配置&lt;/h1&gt;
&lt;h3&gt;Spark集群配置&lt;/h3&gt;
&lt;p&gt;配置文件：$SPARK_HOME/conf/spark-env.sh
主要的配置参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPARK_MASTER_IP, to bind the master to a different IP address or hostname&lt;/li&gt;
&lt;li&gt;SPARK_WORKER_CORES, to set the number of cores to use on this machine&lt;/li&gt;
&lt;li&gt;SPARK_WORKER_MEMORY, to set how much total memory workers have to give executors (e.g. 1000m, 2g)&lt;/li&gt;
&lt;li&gt;SPARK_WORKER_INSTANCES, to set the number of worker processes per node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例：一共5台机器，每台24个cpu cores，每台机器上有90GB内存：
    export SPARK_WORKER_MEMORY=30000m
    export SPARK_WORKER_CORES=8
    export SPARK_WORKER_INSTANCES=3
另外还有一些关于Hadoop的配置参数，这是为了Spark on Yarn的工作模式提供的，如果你只使用Standalone模式，则不需要配置。&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://spark.apache.org/docs/latest/configuration.html"&gt;Saprk执行作业属性&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&amp;gt;&amp;gt;配置方式&lt;/h4&gt;
&lt;p&gt;在Spark1.0.x提供了3种方式的属性配置：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SparkConf方式，在代码中配置各个参数；&lt;/li&gt;
&lt;li&gt;命令行参数方式
    使用spark-submit或spark-shell提交应用程序时用命令行参数提交；&lt;/li&gt;
&lt;li&gt;文件配置方式
    在$SPARK_HOME/conf/spark_default.conf里进行配置；该方式是将属性配置项以键值对方式写入文本文件中，一个配置项占一行；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优先权：&lt;br /&gt;
    SparkConf方式 &amp;gt; 命令行参数方式 &amp;gt;文件配置方式&lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;查看Spark属性配置&lt;/h4&gt;
&lt;p&gt;在应用程序执行过程中，通过应用程序的webUI（地址http://&lt;driver&gt;:4040）可以查看Spark属性配置，从而检查属性配置是否正确；&lt;br /&gt;
只是显示通过上面三种方式显式指定的属性配置，对于其他属性可以假定使用默认配置；&lt;br /&gt;
对于大多数内部控制属性，系统已经提供了合理的默认配置。  &lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;Spark日志属性配置&lt;/h4&gt;
&lt;p&gt;Spark日志：log4j，配置文件：$SPARK_HOME/conf/log4j.properties&lt;/p&gt;
&lt;p&gt;Spark job(Application)日志，计数器：通过刚才提到的三种方式中的任意一种，对一下Spark Conf进行配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;spark.eventLog.enabled=true;  
spark.eventLog.dir=hdfs:\\...
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guozhongxin</dc:creator><pubDate>Sun, 12 Oct 2014 21:00:00 +0800</pubDate><guid>tag:www.guozhongxin.com,2014-10-12:pages/2014/10/12/a_brief_in_spark.html</guid><category>spark</category><category></category></item><item><title>pelican建站攻略补充（站内搜索，和标签云）</title><link>http://www.guozhongxin.com/pages/2014/09/25/build_blog_with_pelican.html</link><description>&lt;h2&gt;pelican建站准备&lt;/h2&gt;
&lt;p&gt;参见lizherui的&lt;a href="http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt;一步一步打造Geek风格的技术博客&lt;/a&gt;，不累述&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;添加站内搜索&lt;/h2&gt;
&lt;p&gt;由于原日志中关于添加google站内搜索的链接失效，在其他地方没有看到特别好的介绍。&lt;br /&gt;
我首先尝试了直接在&lt;code&gt;pelicanconf.py&lt;/code&gt;中直接添加&lt;code&gt;GOOGLE_CUSTOM_SEARCH_NAVBAR&lt;/code&gt;这一条属性，结果在&lt;code&gt;make html&lt;/code&gt;之后，左上角的search框，在参考了lizhurui的博客代码后，我是这样实现的。  &lt;/p&gt;
&lt;h3&gt;添加google站内搜索&lt;/h3&gt;
&lt;h4&gt;修改主题：&lt;/h4&gt;
&lt;p&gt;找到这个主题（&lt;code&gt;tuxlite_tbs&lt;/code&gt;）的templates文件夹中的&lt;code&gt;base.html&lt;/code&gt;，在这个div(&lt;code&gt;&amp;lt;div class="nav-collapse"&amp;gt;&lt;/code&gt;)的最后，添加以下内容：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-search pull-right&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/search.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search-query&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新pelican的主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-themes -U .../tuxlite_tbs
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建search.html&lt;/h4&gt;
&lt;p&gt;之后，在output目录下，新建一个名为search.html的文件，写入下面的内容，其中需要你自己修改的是google站内搜索的ID号，需要自己在&lt;a href="https://www.google.com/cse/"&gt;google站内搜索&lt;/a&gt;的网站上自己申请。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zh_CN&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;站内搜索&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nf"&gt;#search-box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#search-form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#search-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#search-box&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;search-box&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/search.html&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;search-form&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;get&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_top&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;search-text&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Search&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width: 100%;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Loading&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.google.com/jsapi&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zh-CN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;V2_DEFAULT&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOnLoadCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;customSearchOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;customSearchControl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CustomSearchControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;012191777864628038963:**********&amp;lt;!写入你申请的google站内搜索的ID号&amp;gt;）&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customSearchOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;customSearchControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setResultSetSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FILTERED_CSE_RESULTSET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DrawOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enableSearchResultsOnly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
    &lt;span class="nx"&gt;customSearchControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseParamsFromUrl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x26&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;keyValuePair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
            &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseParamsFromUrl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;queryParamName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;queryParamName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;customSearchControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;queryParamName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;生成html，发布&lt;/h4&gt;
&lt;p&gt;将这个html文件保存在output目录（网站的根目录）下，执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，搜索框就出来了。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="http://www.guozhongxin.com/images/searchwithgoogle.png" /&gt;&lt;/p&gt;
&lt;p&gt;为了让google站内搜索功能更好的工作，你可在google站长工具中提交你的sitemap（这个可以在pelicanconf.py中配置sitemap插件，着执行make html后能自动生成）。&lt;/p&gt;
&lt;h4&gt;提交sitemap&lt;/h4&gt;
&lt;p&gt;引入sitemap插件的工程见lizherui的日志。这样在&lt;code&gt;make html&lt;/code&gt;之后就能生成sitemap.xml文件，提交到google站长上，搜索就可以生效了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;添加百度站内搜索&lt;/h3&gt;
&lt;p&gt;虽然实现了google站内搜索的功能，但是由于GFW的原因导致实际在使用google站内搜索时加载太慢，最终，我还是无奈的选择了百度站内搜索。。。  &lt;/p&gt;
&lt;h4&gt;注册&lt;/h4&gt;
&lt;p&gt;在&lt;a href="http://zhanzhang.baidu.com/"&gt;百度站长平台&lt;/a&gt;中注册一个账号，之后添加网站，按照提示验证网站。&lt;br /&gt;
之后左侧&lt;code&gt;其他工具&lt;/code&gt;中找到&lt;code&gt;站内搜索&lt;/code&gt;，按照提示填写基本信息，选择搜索框样式，之后点击&lt;code&gt;查看代码&lt;/code&gt;，复制其中内容，留用。  &lt;/p&gt;
&lt;h4&gt;修改主题&lt;/h4&gt;
&lt;p&gt;同样在&lt;code&gt;base.html&lt;/code&gt;的这个个div(&lt;code&gt;&amp;lt;div class="nav-collapse"&amp;gt;&lt;/code&gt;)的最后，新建一个&lt;code&gt;div&lt;/code&gt;，刚才注册最后复制的代码粘贴到这个&lt;code&gt;div&lt;/code&gt;中： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-search pull-right&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;  
        &lt;span class="cp"&gt;&amp;lt;!略&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新pelican的主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-themes -U .../tuxlite_tbs
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;生成html，发布&lt;/h4&gt;
&lt;p&gt;同上  &lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="http://www.guozhongxin.com/images/searchwithbaidu.png" /&gt;&lt;/p&gt;
&lt;h4&gt;提交sitemap&lt;/h4&gt;
&lt;p&gt;在百度站长工具里提交sitemap的过程和google的类似，需要注意的是百度有自己的&lt;a href="http://zhanzhang.baidu.com/wiki/170#_2什么是sitemap索引文件？"&gt;sitemap格式&lt;/a&gt;，直接用lizherui日志中的方法生成的sitemap.xml不符合百度的要求：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="http://www.guozhongxin.com/images/sitemapofbaidu.png" /&gt;&lt;/p&gt;
&lt;p&gt;百度sitemap要求有&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;data&amp;gt;&amp;lt;display&amp;gt;&amp;lt;/display&amp;gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而我们使用的sitemap工具里没有这个，需要手动的对这个插件进行修改.&lt;/p&gt;
&lt;h4&gt;配置符合百度站内搜索规则的pelican sitemap插件&lt;/h4&gt;
&lt;p&gt;找到&lt;code&gt;.../pelican-plugins/sitemap/sitemap.py&lt;/code&gt;，找到全局变量&lt;code&gt;XML_URL&lt;/code&gt;，将其修改为以下形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;XML_URL = &amp;quot;&amp;quot;&amp;quot;
&lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;loc&amp;gt;&lt;/span&gt;{0}/{1}&lt;span class="nt"&gt;&amp;lt;/loc&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{2}&lt;span class="nt"&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;changefreq&amp;gt;&lt;/span&gt;{3}&lt;span class="nt"&gt;&amp;lt;/changefreq&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;priority&amp;gt;&lt;/span&gt;{4}&lt;span class="nt"&gt;&amp;lt;/priority&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;data&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;display&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/display&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，重新&lt;code&gt;make html&lt;/code&gt;就能生成一份符合百度站内搜索的sitemap.xml。将其提交到百度站内搜索“提交数据”中，等待百度验证之后，就能体验百度站内搜索功能。&lt;/p&gt;
&lt;p&gt;在这里吐槽一句，百度的站长工具确实不如google webmasters，同样是提交sitemap，google可以做到立即生效，百度的要等至少一个小时。如果没有GFW，才懒得用百度的呢。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;添加Tags链接&lt;/h2&gt;
&lt;p&gt;在其他一些pelican主题中，看到有标签云，想到Tags的链接可能比Categories的链接更有用，通过更改主题，添加了侧栏中红框内的Tags链接框。&lt;/p&gt;
&lt;h4&gt;修改主题&lt;/h4&gt;
&lt;p&gt;还是找到&lt;code&gt;base.html&lt;/code&gt;，找到categories部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;well&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;padding: 8px 0; background-color: #FBFBFB;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav nav-list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    Categories
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;null&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;                   
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看到这一部分的代码之后，很容易仿写tags链接框的部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;well&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;padding: 8px 0; background-color: #FBFBFB;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav nav-list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    Tags
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将tags代码添加到categories框之后。执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-themes -U .../tuxlite_tbs
make html
make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时，你就能看到左侧栏出现的TAGS链接框了。&lt;br /&gt;
&lt;img alt="4" src="http://www.guozhongxin.com/images/tags.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上这不是一个能体现tag出现频次的tag云，小弟实在没学过前端技术，大神看到有感兴趣的可以提出解决的方法。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guozhongxin</dc:creator><pubDate>Thu, 25 Sep 2014 21:00:00 +0800</pubDate><guid>tag:www.guozhongxin.com,2014-09-25:pages/2014/09/25/build_blog_with_pelican.html</guid><category>pelican</category><category>python</category><category></category></item></channel></rss>