<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>guozhongxin's blog</title><link href="http://www.guozhongxin.com/" rel="alternate"></link><link href="http://www.guozhongxin.com/feeds/guozhongxin.atom.xml" rel="self"></link><id>http://www.guozhongxin.com/</id><updated>2017-05-02T23:00:00+08:00</updated><entry><title>迟到的毕业求职总结：兜兜转转回到起点</title><link href="http://www.guozhongxin.com/pages/2017/05/02/jobhunting.html" rel="alternate"></link><updated>2017-05-02T23:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2017-05-02:pages/2017/05/02/jobhunting.html</id><summary type="html">&lt;h2&gt;起步有点慢的求职季&lt;/h2&gt;
&lt;p&gt;之前找实习机会还是挺顺利的，导致我到了7月份了都没怎么准备面试套路，也没怎么刷题。慢热的我直接错过了很多互联网公司的内推。在此要特地友情提示一下要找工作的应届生，&lt;strong&gt;一定要赶早投简历&lt;/strong&gt;，特别是内推环节，不要拖到收简历的最后几天，因为很大概率上hr们已经被简历淹没，后边投的就不理了。&lt;/p&gt;
&lt;h2&gt;我的求职方向&lt;/h2&gt;
&lt;p&gt;我求职的主要两个方向：一是分布式计算工程师，二是算法工程师。个人更倾向于前者，但是还是要看具体工作内容。而且有些公司面试时岗位分的不是那么细。&lt;/p&gt;
&lt;h2&gt;求职前的准备&lt;/h2&gt;
&lt;h3&gt;1.首先还是要好好刷题的&lt;/h3&gt;
&lt;p&gt;一方面要把算法题刷起来，其实我建议越早越好，我正式刷题起步太晚，好在之前有点基础。在改完论文的一个月的时间里，先刷完了《剑指offer》，《编程之美》，以及部分Leetcode中等以上的题目，不得不说，刷题还是很有帮助的，起码适用于面试。&lt;/p&gt;
&lt;p&gt;另一方面是基础知识，包括但不限于：操作系统，计算机网络，编程语言，设计模式，编程框架，linux等等。我的工程知识是弱点，尽管提前看了些JVM和java编程框架等等方面的知识，但是遇到在这方面深究的面试官，还是会捉襟见肘。&lt;/p&gt;
&lt;p&gt;最后是和自己求职岗位直接相关的内容。对于我而言，包括机器学习算法原理、公式推导，分布式系统等等。对于自己擅长的分布式系统方面，我重新翻了一遍社区和源码，并且对一些主流技术的优劣都心中有数。&lt;/p&gt;
&lt;h3&gt;2.准备一份好看的简历&lt;/h3&gt;
&lt;p&gt;所谓好看，各家标准不一。总归要：格式清晰，内容详实最好有数据，最好一页，突出重点。工程师的简历还是要突出自己的项目和实习经历的，一些相关的奖项也会增添光彩，太过普遍的成绩或者和求职不相关的经历就没必要写了。比如要做程序员就没必要写学生干部经历了。&lt;/p&gt;
&lt;p&gt;我在实习之前就有相对完善的中英文简历，后来mentor又给了一些建议，我也会经常update。在准备简历的时候，顺便反复练习怎么把自己的项目经历准确简洁的描述出来，这一点还是很有用的。在面试中连自己的项目经历都表述的模棱两可磕磕绊绊，这可是极大的减分项。&lt;/p&gt;
&lt;h3&gt;3.和求职小伙伴及时分享信息&lt;/h3&gt;
&lt;p&gt;这一点帮我比较快的进入求职节奏，不断发现自己欠缺的地方。需要注意的是，要保持心态的稳定，对自己的定位要保持清醒，不要被干扰。&lt;/p&gt;
&lt;h3&gt;4.实战锻炼&lt;/h3&gt;
&lt;p&gt;其实最好的提高方法还是实战，多面几次自然就懂面试套路了。&lt;/p&gt;
&lt;h2&gt;一步一步求职路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;百度·凤巢：这是最早投的，中午到下午，三面一口气面完。我投的是分布式系统方向，面试的组是做策略算法的。有两个关于分布式算法的问题，比较偏实际应用场景。有3道代码题，medium难度上下。事后平台组又问我要不要面他们组，但相当于放弃了之前面的策略组，因为考虑到这是第一个offer，就想着求稳，没有再面。百度最开始offer给的批发价，要拿其他公司的offer去argue，非常没有诚意。尽管后来谈到special，而且表示可以再申请更高，还是拒掉了百度。&lt;/li&gt;
&lt;li&gt;京东·广告：第一次面了算法组，第一面卡在了设计模式上。。被拒。。第二次面了平台组，就比较得心应手了。和三面面试官聊得不错，而且后来给的offer当时看来比百度的高，就愉快的接受了。后来还是发现自己太naive了，最后不得不毁掉。。向京东广告组道歉。。&lt;/li&gt;
&lt;li&gt;蚂蚁金服·人工智能：四轮面试，主要是偏算法方向的，难度还是很大的，都是在线面的，之后HR面说北京名额比较少，问我去不去杭州，我说不去。之后又加了第5轮，虽然第五轮面的也还行，但最终还是被拒。&lt;/li&gt;
&lt;li&gt;360：一面被挂，面试时脑子锈住了。。&lt;/li&gt;
&lt;li&gt;滴滴：面试现场极其混乱，所有同学应该都感同身受。我从上午8点半到，一直到下午2点才找到一面面试官，3面+HR面结束后，已经晚上8点多了！投的大数据开发工程师，但是对口的面试官都不在，我也是服了，对滴滴没啥好印象。&lt;/li&gt;
&lt;li&gt;一点资讯：是学长内推的，面试的组是做爬虫的。。面试中主要在java知识上栽了跟头，三面被拒了。&lt;/li&gt;
&lt;li&gt;网易有道：没有具体区分岗位，但是二三面面试官都是做广告的，知道我是做分布式的，问了很多广告系统的问题，回答的还可以。给了offer，当时已经有其他在考虑的offer，待遇也没啥竞争力，通知电话里直接拒掉了。&lt;/li&gt;
&lt;li&gt;今日头条·基础架构：头条的内推华丽丽的错过了。正式校招是三轮面试，当天面试人也很多，但是现场组织明显比滴滴好太多。因为投递的岗位就是大数据工程师，所以面试的内容比较有针对性。和三面面试官聊了很多实际问题，特别是在超大数据量（Batch &amp;amp; Streaming两种情况）下，如何设计各个层次，而且不同方案都会有哪些优劣。面试官给定的场景比较具体，但考察的范围很宽，在设计方案时既要考虑不同的分布式系统，也要把计算机底层知识运用起来。和面试官的交流加深了我对工业界海量数据分析的了解，很长见识，而且头条的数据规模和集群规模都特别大，对我很有吸引力。最后拿到了头条最高档的offer，如果Dream offer没拿到手的话，应该是我的最好的选择了。&lt;/li&gt;
&lt;li&gt;搜狐：参加完网易的面试的当天接着就去搜狐参见面试，总共只有两面，主要是集中在Spark的源码部分，答的不是特别好，当时对一些新特性了解不够深刻。面试的组好像就是在做Spark的优化的，好像还有commiter。二面面试官还问我为什么没有在Spark社区做贡献，让我感觉自己很low。最后拿到了offer，但时间比较晚，也是直接拒掉了。&lt;/li&gt;
&lt;li&gt;宜信·大数据：宜信前后去了两次面完的，第二次面试由于时间冲突没去成，以为没有机会了但是HR还是积极争取了第二次面试的机会。一共三面技术面，面试的算法题特别多，各个面试官让写了代码。问的问题大都和机器学习数据挖掘相关，和三面面试官聊了些分布式计算的问题，了解到宜信的分布式平台搭建在自己开发的私有云上，感觉技术能力还是很强的。最后给的offer还是很诱人的，而且有户口机会，还是不错的选择。&lt;/li&gt;
&lt;li&gt;美团点评：由学长直接推到美团点评Spark团队的。因为之前看了这个团队的几篇技术博文，了解到这里的业务和平台规模很大，技术能力和经验也不错，直接就奔着这个团队来了。一共四面，最后一轮是后加的。前三面也是先从写代码开始，最后主要聊了聊之前实习的项目，还有一些Spark的优化问题。三面有一个代码题没回答出来，但是其他问题回答的还行。面试和给offer的时间都比较晚，因为薪水问题想直接拒掉，但是HR很热心的申请了最高档的offer，但是需要跨部门的领导再面一轮。这一轮也是主要聊得项目。最后能给的最高的offer也没太有竞争力，只能很遗憾的拒掉了。&lt;/li&gt;
&lt;li&gt;Freewheel：论坛学长帮忙推的，一共三面，最后一面的Leader有别的事，很快就结束了。主要面试内容也是先从代码题开始，再次强调一下，刷题很重要(x3)，而且要注意边界问题和代码规范性。和二面面试官聊得比较投机，聊了一些当前他在做的项目、相应的技术选型以及可能的问题。最后也拿到了offer。不过Freewheel的数据分析集群规模相对较小。&lt;/li&gt;
&lt;li&gt;商汤科技：线下笔试+四轮面试。笔试考得挺泛，代码题写得还行，想出来一种时间复杂度最低的算法。HR最开始安排的两轮面试官不太match，主要是做后台开发的，对分布式平台不太熟悉。二面结束后在回学校的路上HR得到之前面试官的反馈后重新安排了对口的面试官。第二次过来面试的内容集中在分布式系统的基本知识和一致性协议上，三面面试官挖过比特币，还聊了BlockChain的具体技术细节。四面面试官还介绍了商汤在大规模图像识别，以及视频图片分布式存储、索引的工作内容，很有启发。商汤offer发下来之后，三面面试官单独约我吃饭聊了聊，听说我在等MSRA消息之后，还提出见一下大boss。最后MSRA offer到手后，怕有讨价还价之嫌，还是放弃了这个机会，主要还是坚持想来MSRA的遗愿，但是后来感觉后悔了，见一面聊一聊也没啥，关键能长见识呀。&lt;/li&gt;
&lt;li&gt;MSRA：最后终于要聊到微软亚洲研究院了。面试走的实习生绿色通道，比校招少一轮面试，再加上mentor强推我，又少了一轮面试，因此总共有三面（校招是5面）：技术面+Research面+AA面。微软的面试还是倾向于写代码的，这个提前有思想准备，但是在Research面时还是栽了。在一道我认为很简单的问题上，面试官一直追问还有没有优化方法、还有没有可以优化的地方。最后我实在答不上来了，面试官提示了可以考虑CPU寻址和内存对齐问题。。在Researcher面前比较明显的暴露了我的短板，不是计算机科班出身，思路不够开阔，一直陷入算法本身的优化，没有想到运用计算机系统的知识。其他代码题回答的还可以，项目聊得比较多，讲项目的时候我感觉一直被那位researcher challenge(😅)。之后的AA面相对轻松一些，田老大还是很Nice地聊了些在研究院做RSDE的特点和不同。最后很幸运的拿到了这个Dream offer。拿到这个offer之后，及时地和几个一直在考虑公司解释了情况，拒掉了他们的offer，也特别感谢这些公司的青睐和理解。至此，我的求职季就正式结束了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;尾声&lt;/h2&gt;
&lt;p&gt;求职季也就三四个月，但每天就像打仗一样，尤其是一天面多家时会特别疲惫。特别感谢我的爸妈和盼盼对我的鼓励和支持。&lt;/p&gt;
&lt;p&gt;求职结束也意味着我的职场生涯即将开启，新的征程在等着我。&lt;/p&gt;</summary></entry><entry><title>忙忙碌碌 我的2016</title><link href="http://www.guozhongxin.com/pages/2017/04/28/summary2016.html" rel="alternate"></link><updated>2017-04-28T23:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2017-04-28:pages/2017/04/28/summary2016.html</id><summary type="html">&lt;h2&gt;2016&lt;/h2&gt;
&lt;p&gt;2016对于我是注定忙碌的一年。&lt;/p&gt;
&lt;p&gt;直到拿到dream offer前，手上同时都会有多方面的工作要做。第一研究生毕业所需要的小论文不能再拖了；第二，17年毕业的我要开始找实习，并准备找工作了；第三毕业设计也要在年底前完成所有工作；第四，实验室的项目，以及集群管理的日常工作都需要我一直参与。&lt;/p&gt;
&lt;h3&gt;1.实习：和MSRA的第一段缘分&lt;/h3&gt;
&lt;p&gt;春节前学长内推我去微软亚洲研究院实习。面试的组正在做分布式计算的相关研究，要基于Spark源码做开发，面试的内容主要和Spark相关。当时面试官，也是后来的同事chenyang、gaoyanjie，拿了一个笔记本过来，直接对着Spark源码开始提问。整体上面试内容正合我胃口，也就有幸拿到了MSRA的实习机会。&lt;/p&gt;
&lt;p&gt;在MSRA的前半段时间里，我参与到了TR-Spark的工作中来。简单来说，TR-Spark是在一种非常不稳定的云环境（&lt;code&gt;Transient Resource&lt;/code&gt;）下，依然能稳定工作的分布式计算平台，是当时的代码在Spark 1.5.2版本上进行二次开发的。这种不稳定的云环境是一些非常廉价的云主机，会在其他租户申请资源时被主动释放掉，以供这些“高级”租户使用，虽然不稳定，但也相当廉价。TR-Spark在这种环境下，通过resource stability and data size reduction-aware scheduling，以及 lineage-aware checkpointing两大策略相结合，智能的备份Spark计算的中间结果（两个Stage之间进行shuffle时的&lt;code&gt;block&lt;/code&gt;），从而提高了分布式平台在Transient Resource环境下的高可用性[1]。&lt;/p&gt;
&lt;p&gt;之后，我的mentor，yanying转向了区块链&lt;code&gt;BlockChain&lt;/code&gt;的研究。我还记得的最开始的时候，ying姐拉我到一个讨论室里“安利”我什么是BlockChain，这是我第一次听说这个技术，听得我云里雾里。紧接着，ying姐，chenyang带着我开始看各种相关BlockChain开源项目的白皮书，开始研究BlockChain到底是什么。刚接触新事物的我会比较迷茫，不知道从何看起，而且有时会get不到两位researcher的点。在ying姐的强有力的指导和push下，我们抽丝剥茧，一步步理解BlockChain技术核心。实际中我们是从BigchainDB源码开始，了解BlockChain运作的整个流程。并基于BigchainDB做了一个基于BlockChain的慈善系统（BlockChain for Charity），参加了微软的Hackathon。由于在不像大多数BlockChain上都是虚拟货币，在慈善系统中记录的可能是实际货币，甚至是物品，因此我在BigchainDB上做了一个tx receiver要进行确认的机制。在这个项目中，我们也发现BigchainDB的整体架构和主流的区块链项目有明显差异：BigchainDB是建立在一个分布式的数据库上，而不是各自节点分别maintain一个数据库，因此虽然不用考虑数据一致性的问题从而提高了Throughput，但是也给整个系统带来了安全上的风险。这一差异各有优劣。之后我们又开始研究Ethereum，一个主流的BlockChain项目，我重点关注了Smart Contract方面的问题。&lt;/p&gt;
&lt;p&gt;从16年2月底到9月初，六个月多的时间过得很快，也很充实。最幸运的是有一个超级棒的mentor，在各个方面给我很多指导和机会，自己受益匪浅。实习期间合作的两位同事，Spark专家yanjie，博学的chenyang，还有老板Thomas，也都让我对MSRA充满了崇拜。&lt;/p&gt;
&lt;h3&gt;2.小论文：一波两折&lt;/h3&gt;
&lt;p&gt;到了16年我的小论文不能再拖了，春节期间把论文思路整理里一下，研二下学期开学回来就开始动笔了。&lt;/p&gt;
&lt;p&gt;小论文主要研究内容是针对分布式计算平台的性能瓶颈进行分析、建模。所谓性能瓶颈主要是指分布式作业执行期间，集群资源的有限性对执行效率的影响。最初的点是IBM研究院实现时的mentor，巨伟提出的，我零零散散做了近一年的时间。首先是将性能瓶颈进行量化，把性能分析从定性分析问题变成量化指标。再通过计算平台log中的metrics对性能瓶颈指标进行建模，得到一个适用于不同集群、不同类型作业的性能瓶颈模型。&lt;/p&gt;
&lt;p&gt;在小论文上，主要从一个和我自己导师有合作关系的老师那里得到了一些指导，但她对研究内容本身没有太多了解。第一版的论文写得很潦草，投了CIKM，等了两个月之后最后收到了4个review，两个accept、一个borderline、一个reject，最后得到chair的reject。一般cikm都是3个reviewer，看来在最开始的review中分歧较大，多加了一个。这些review很犀利，也很到位，不得不服。&lt;/p&gt;
&lt;p&gt;在做了相对应的修改和调整后，我和导师就投稿会议产生了分歧，导师想让我投VLDB这样的顶会，我不思进取找个时间近的水会就要投，最后导师还是放了我一马，投了HPCC: 。在修改论文时，我在MSRA实习的两位小伙伴youer和辰哥帮我修改英文表达，事实证明留学的博士就是强。感觉在MSRA认识的博士都非常让我佩服，洗刷了我对博士的naive的偏见，也后悔当时怎么没考虑读博呢。。&lt;/p&gt;
&lt;h3&gt;3.找工作：兜兜转转回到起点&lt;/h3&gt;
&lt;p&gt;主要过程记录在这篇博文里：&lt;a href="http://guozhongxin.com/pages/2017/05/02/jobhunting.html"&gt;迟到的毕业求职总结：兜兜转转回到起点&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;4.毕业设计&lt;/h3&gt;
&lt;p&gt;[1]Yan Y, Gao Y, Chen Y, et al. TR-Spark: Transient Computing for Big Data Analytics[C]// ACM Symposium on Cloud Computing(SoCC). ACM, 2016:484-496.&lt;/p&gt;
&lt;p&gt;[2]Guo Z, Hu Z, Zhang C, et al. Learning-Based Characterizing and Modeling Performance Bottlenecks of Big Data Workloads[C]//IEEE 18th International Conference on High Performance Computing and Communications(HPCC). IEEE, 2016: 860-867.&lt;/p&gt;</summary></entry><entry><title>博客重启</title><link href="http://www.guozhongxin.com/pages/2017/04/25/restart.html" rel="alternate"></link><updated>2017-04-25T23:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2017-04-25:pages/2017/04/25/restart.html</id><summary type="html">&lt;h2&gt;关于此博客&lt;/h2&gt;
&lt;p&gt;这个博客刚开始搭建时，我刚上研究生不久。那时我对于各种技术都很懵懂，又充满热情。搭建博客之初，我还计划着把我的成长都记录在这，因此，对这个博客也充满热情。&lt;/p&gt;
&lt;p&gt;早在2013年底，当时大四的我有幸进入了IBM中国研究院，前后做了接近一年的实习生。正是这段经历，我开始接触并学习分布式平台，特别要感谢我的mentor，巨伟，给还是小白的我提供了很多帮助和指导，让我在知识之外学习到研究的基本方法。&lt;/p&gt;
&lt;p&gt;那时“大数据”的概念刚开始炒作，Hadoop已经推广开来，Spark方兴未艾，我也把分布式技术作为我读研期间的主要方向。当时就想着，把我在学习过程中的收获和体会都记录在这，积少成多，一定是一个值得期待的事情。&lt;/p&gt;
&lt;p&gt;但是在写了几篇文章后，这种热情就削减了。可能是我之前对自己、对这个博客期望太高了，写出来的东西并不满意，平常忙(hao)于(chi)学(lan)业(zuo)，没能持续投入精力去维护这个博客。特别是看到一些大牛的blog，自己的文章更是相形见绌，也没啥新意。最后导致了这个博客荒废了两年零三个月。&lt;/p&gt;
&lt;h2&gt;博客荒废之后的我&lt;/h2&gt;
&lt;p&gt;其实，博客荒废的这两年多，是我快速成长、变化的阶段。更具体的来说，我完成了研究生学业，并开始了职业生涯。这两年多也是我经历最丰富的阶段。&lt;/p&gt;
&lt;h3&gt;· 2015&lt;/h3&gt;
&lt;p&gt;2015年全年的时间基本都是在实验室做项目，也开始慢慢蹭蹭的做些研究，找论文点。主要的工作一方面是在搞一些机器学习算法的分布式实现上，一方面是在做一些实验室分布式集群的完善和性能调优上，这个阶段，经历Spark从1.2到1.5.2（刚才特地去官网上验证了一下，证明我的记忆没有偏差），社区越来越活跃，周边项目逐渐丰富起来。实验室的数据分析工作基本上都跑在Spark上，MLlib和GraphX的逐渐丰富提供了很大的帮助。&lt;/p&gt;
&lt;p&gt;从2014年底开始接触股票的我，在小赚一笔后迎来了15年的“股灾”，不仅金钱损失，也耗费了不少时间和精力。现在虽未完全退市，但基本不投入精力了，一个月操作不了几次。&lt;/p&gt;
&lt;h3&gt;· 2016&lt;/h3&gt;
&lt;p&gt;2016是我最忙碌的一年，内容太过“精彩”，另起一篇记录吧：&lt;a href="http://guozhongxin.com/pages/2017/04/28/summary2016.html"&gt;忙忙碌碌 我的2016&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Spark DAGScheduler模块源码解析</title><link href="http://www.guozhongxin.com/pages/2015/01/25/spark_dagscheduler.html" rel="alternate"></link><updated>2015-01-25T21:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2015-01-25:pages/2015/01/25/spark_dagscheduler.html</id><summary type="html">&lt;h2&gt;Spark DAGScheduler的背景知识&lt;/h2&gt;
&lt;p&gt;Spark Application在遇到action算子时，SparkContext会生成Job，并将构成DAG图将给DAG Scheduler解析成Stage。&lt;/p&gt;
&lt;h3&gt;Stage&lt;/h3&gt;
&lt;p&gt;Stage是Spark对DAG的划分，以此作为对作业的进行任务（task）划分和调度的依据。&lt;br /&gt;
可以这样理解Stage不需要shuffle是可以随意并发的, 所以stage的边界就是需要shuffle的地方。&lt;/p&gt;
&lt;p&gt;下图是一个stage例子。
&lt;img alt="3" src="http://www.guozhongxin.com/images/stage.png" /&gt; &lt;/p&gt;
&lt;p&gt;Stage有两种： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ShuffleMapStage&lt;br /&gt;
  这种Stage是以Shuffle为输出边界，其输入边界可以是从外部获取数据，也可以是另一个ShuffleMapStage的输出，其输出可以。是另一个Stage的开始ShuffleMapStage的最后Task就是ShuffleMapTask。在一个Job里可能有该类型的Stage，也可以能没有该类型Stage。&lt;br /&gt;
  上图Stage 1，Stage 2都属于ShuffleMapStage&lt;/li&gt;
&lt;li&gt;ResultStage&lt;br /&gt;
  这种Stage是直接输出结果。其输入边界可以是从外部获取数据，也可以是另一个ShuffleMapStage的输出。ResultStage的最后Task就是ResultTask。在一个Job里必定有该类型Stage。一个Job含有一个或多个Stage，但至少含有一个ResultStage。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;DAGScheduler&lt;/h3&gt;
&lt;p&gt;DAGScheduler主要功能如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收用户提交的job;&lt;/li&gt;
&lt;li&gt;将job根据类型划分为不同的stage，记录哪些RDD、Stage被物化，并在每一个stage内产生一系列的task，并封装成TaskSet；&lt;/li&gt;
&lt;li&gt;决定每个Task的最佳位置(任务在数据所在的节点上运行)，并结合当前的缓存情况；将TaskSet提交给TaskScheduler;&lt;/li&gt;
&lt;li&gt;重新提交Shuffle输出丢失的Stage给TaskScheduler；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：一个Stage内部的错误不是由shuffle输出丢失造成的，DAGScheduler是不管的，由TaskScheduler负责尝试重新提交task执行；&lt;/p&gt;
&lt;h2&gt;Spark DAGScheduler源码解析&lt;/h2&gt;
&lt;p&gt;DAGScheduler的创建是在用户定义一个新的&lt;code&gt;SparkContext&lt;/code&gt;时进行的。（需要注意的是，在SparkContext中，TaskSchduler是在DAGScheduler之前生成的，即&lt;code&gt;dagScheduler = new DAGScheduler(this)&lt;/code&gt;中的this.taskScheduler已经被生成，这个taskScheduler也是dagScheduler的一个成员变量）&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;1&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;@volatile&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;private&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;spark&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;var&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;dagScheduler&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;DAGScheduler&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;2&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;try&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;3&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;dagScheduler&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;DAGScheduler&lt;/span&gt;(&lt;span style="color: rgb(227, 206, 171);"&gt;this&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;4&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;catch&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;5&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Exception&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;throw&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;6&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;SparkException&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;DAGScheduler cannot be initialized due to %s&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;format&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;getMessage&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;7&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;当执行&lt;code&gt;输出算子&lt;/code&gt;的时候，spark会调用&lt;code&gt;sc.runJob()&lt;/code&gt;方法，例如&lt;code&gt;RDD.scala&lt;/code&gt;中定义的&lt;code&gt;count()&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;1&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;count&lt;/span&gt;()&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Long&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;sc&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;runJob&lt;/span&gt;(&lt;span style="color: rgb(227, 206, 171);"&gt;this&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Utils&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;getIteratorSize&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;).&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;sum&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;跟进到&lt;code&gt;SparkContext.scala&lt;/code&gt;中的&lt;code&gt;runJob()&lt;/code&gt;方法，可以看到：  &lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;01&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;runJob&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;T&lt;/span&gt;, &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;U:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;ClassTag&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;](&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;02&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;T&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;],&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;03&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; (&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;TaskContext&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Iterator&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;T&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;])&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;U&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;04&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Seq&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;],&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;05&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Boolean&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;06&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;resultHandler&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; (&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;U&lt;/span&gt;) &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Unit&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;07&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(204, 120, 51);"&gt;dagScheduler&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;==&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;null&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;08&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;throw&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;SparkException&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;SparkContext has been shutdown&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;09&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;10&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getCallSite&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;11&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;cleanedFunc&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;clean&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;12&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Starting job: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;shortForm&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;13&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;start&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;System&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;nanoTime&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;14&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(204, 120, 51);"&gt;dagScheduler&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;runJob&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;cleanedFunc&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;15&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;resultHandler&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;localProperties&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;get&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;16&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;17&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Job finished: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;shortForm&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;, took &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;System&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;nanoTime&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;-&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;start&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;/&lt;/span&gt; &lt;span style="color: rgb(140, 208, 211);"&gt;1&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;e9&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot; s&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;18&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;doCheckpoint&lt;/span&gt;()&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;19&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;sc.runJob()&lt;/code&gt;是调用的&lt;code&gt;dagScheduler.runJob()&lt;/code&gt;方法。跟进到&lt;code&gt;DAGScheduler.runJob()&lt;/code&gt;&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;01&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;runJob&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;T&lt;/span&gt;, &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;U:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;ClassTag&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;](&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;02&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;T&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;],&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;03&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; (&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;TaskContext&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Iterator&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;T&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;])&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;U&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;04&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Seq&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;],&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;05&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;CallSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;06&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Boolean&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;07&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;resultHandler&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; (&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;U&lt;/span&gt;) &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Unit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;08&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Properties&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;null&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;09&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;10&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;start&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;System&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;nanoTime&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;11&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;waiter&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(204, 120, 51);"&gt;submitJob&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;resultHandler&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;12&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;waiter&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;awaitResult&lt;/span&gt;() &lt;span style="color: rgb(227, 206, 171);"&gt;match&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;13&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;JobSucceeded&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;14&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Job %d finished: %s, took %f s&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;format&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;15&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(&lt;span style="color: rgb(220, 220, 204);"&gt;waiter&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;shortForm&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;System&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;nanoTime&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;-&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;start&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;/&lt;/span&gt; &lt;span style="color: rgb(140, 208, 211);"&gt;1&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;e9&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;16&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;17&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;JobFailed&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;exception&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Exception&lt;/span&gt;) &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;18&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Job %d failed: %s, took %f s&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;format&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;19&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(&lt;span style="color: rgb(220, 220, 204);"&gt;waiter&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;shortForm&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;System&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;nanoTime&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;-&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;start&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;/&lt;/span&gt; &lt;span style="color: rgb(140, 208, 211);"&gt;1&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;e9&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;20&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;throw&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;exception&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;21&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;22&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;当job被正常提交时，&lt;code&gt;submitJob()&lt;/code&gt;返回一个&lt;code&gt;JobWaiter&lt;/code&gt;的类，并产生一个&lt;strong&gt;&lt;code&gt;JobSubmitted&lt;/code&gt;&lt;/strong&gt;的&lt;code&gt;event&lt;/code&gt;（事件）&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;1&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;waiter&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;JobWaiter&lt;/span&gt;(&lt;span style="color: rgb(227, 206, 171);"&gt;this&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;size&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;resultHandler&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;2&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;eventProcessActor&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;!&lt;/span&gt; &lt;span style="color: rgb(204, 120, 51);"&gt;JobSubmitted&lt;/span&gt;(&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;3&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;func2&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;toArray&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;waiter&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;4&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;waiter&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;DAGScheduler是一个&lt;strong&gt;生产者-消费者模型&lt;/strong&gt;。在DAGScheduler的实例&lt;code&gt;dagScheduler&lt;/code&gt;在SparkContext中被创建时，&lt;code&gt;dagScheduler&lt;/code&gt;初始化了一个守候进程，用来对DAGScheduler中的各种事件进行相应。&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;1&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;private&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;initializeEventProcessActor&lt;/span&gt;() &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;2&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// blocking the thread until supervisor is started, which ensures eventProcessActor is&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;3&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// not null before any job is submitted&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;4&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;implicit&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;timeout&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Timeout&lt;/span&gt;(&lt;span style="color: rgb(140, 208, 211);"&gt;30&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;seconds&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;5&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;initEventActorReply&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;6&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;dagSchedulerActorSupervisor&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;?&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Props&lt;/span&gt;(&lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(204, 120, 51);"&gt;DAGSchedulerEventProcessActor&lt;/span&gt;(&lt;span style="color: rgb(227, 206, 171);"&gt;this&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;7&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(204, 120, 51);"&gt;eventProcessActor&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Await&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;result&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;initEventActorReply&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;timeout&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;duration&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;).&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;8&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;asInstanceOf&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;ActorRef&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;9&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;DAGSchedulerEventProcessActor&lt;/code&gt;这个class在DAGScheduler.scala中被定义，用来接受并处理DAGScheduler工作时产生的各种事件&lt;code&gt;event&lt;/code&gt;,处理的方法是调用传入的&lt;code&gt;dagScheduler&lt;/code&gt;中的方法。&lt;code&gt;DAGSchedulerEventProcessActor&lt;/code&gt;处理的事件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JobSubmitted&lt;/li&gt;
&lt;li&gt;StageCancelled&lt;/li&gt;
&lt;li&gt;JobCancelled&lt;/li&gt;
&lt;li&gt;JobGroupCancelled&lt;/li&gt;
&lt;li&gt;AllJobsCancelled&lt;/li&gt;
&lt;li&gt;ExecutorAdded&lt;/li&gt;
&lt;li&gt;ExecutorLost&lt;/li&gt;
&lt;li&gt;BeginEvent&lt;/li&gt;
&lt;li&gt;GettingResultEvent&lt;/li&gt;
&lt;li&gt;CompletionEvent&lt;/li&gt;
&lt;li&gt;ResubmitFailedStages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以&lt;code&gt;JobSubmitted&lt;/code&gt;事件为例：&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;1&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;JobSubmitted&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;listener&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;) &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;2&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(204, 120, 51);"&gt;dagScheduler&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;handleJobSubmitted&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;3&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;listener&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;)&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;dagScheduler.handleJobSubmitted&lt;/code&gt;将接收到finalRDD的依赖关系解析出来，生成stages，即整个DAG的结构，再调用函数将stage内的tasks打包成TaskSet,交给taskScheduler处理。跟着这个方法，&lt;code&gt;handleJobSubmitted&lt;/code&gt;，就可以了解DAGScheduler的主要功能和实现原理。&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;01&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;private&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;scheduler&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;handleJobSubmitted&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;02&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;finalRDD&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;],&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;03&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; (&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;TaskContext&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Iterator&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;])&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;04&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Array&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;],&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;05&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Boolean&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;06&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;CallSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;07&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;listener&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;JobListener&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;08&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Properties&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;null&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;09&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;10&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;var&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;null&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;11&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;try&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;12&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// New stage creation may throw an exception if, for example, jobs are run on a&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;13&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// HadoopRDD whose underlying HDFS files have been deleted.&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;14&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;newStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;finalRDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;size&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;None&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;15&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;catch&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;16&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Exception&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;17&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logWarning&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Creating new stage failed due to exception - job: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;18&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;listener&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobFailed&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;19&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;return&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;20&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;21&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;!=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;null&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;22&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;ActiveJob&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;func&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;listener&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;23&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;clearCacheLocs&lt;/span&gt;()&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;24&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Got job %s (%s) with %d output partitions (allowLocal=%s)&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;format&lt;/span&gt;(&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;25&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;callSite&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;shortForm&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;length&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;26&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Final stage: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;name&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;27&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Parents of final stage: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;parents&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;28&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Missing parents: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getMissingParentStages&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;29&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;shouldRunLocally&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;30&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;localExecutionEnabled&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;allowLocal&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;parents&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;isEmpty&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;length&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;==&lt;/span&gt; &lt;span style="color: rgb(140, 208, 211);"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;31&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;shouldRunLocally&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;32&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// Compute very short actions like first() or take() with no parent stages locally.&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;33&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;listenerBus&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;post&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;SparkListenerJobStart&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Seq&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;empty&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;34&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;runLocally&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;35&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;else&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;36&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;jobIdToActiveJob&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;) &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;37&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;activeJobs&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;38&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;resultOfJob&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Some&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;39&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stageIds&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobIdToStageIds&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;).&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;toArray&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;40&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stageInfos&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stageIds&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;flatMap&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stageIdToStage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;get&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;).&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;map&lt;/span&gt;(&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;latestInfo&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;41&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;listenerBus&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;post&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;SparkListenerJobStart&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stageInfos&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;42&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;submitStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;finalStage&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;43&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;44&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;45&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;submitWaitingStages&lt;/span&gt;()&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;46&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;可以看出，DAGScheduler生成stage，是通过最后一个RDD推算出来的，（这个RDD通过&lt;code&gt;sc.runJob()&lt;/code&gt; -&amp;gt; &lt;code&gt;dagScheduler.runJob()&lt;/code&gt; -&amp;gt; &lt;code&gt;dagScheduler.submitJob()&lt;/code&gt; -&amp;gt; &lt;code&gt;JobSubmitted()&lt;/code&gt; -&amp;gt; &lt;code&gt;dagScheduler.handleJobSubmitted()&lt;/code&gt; 层层调用传进来的）&lt;/p&gt;
&lt;p&gt;这一行代码，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;finalStage = newStage(finalRDD, partitions.size, None, jobId, callSite)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过调用&lt;code&gt;newStage()&lt;/code&gt;方法，生成了&lt;strong&gt;finalStage&lt;/strong&gt;。实际上，&lt;code&gt;newStage()&lt;/code&gt;中调用了&lt;code&gt;getParentStages()&lt;/code&gt;方法，由finalRDD向前追溯，生成了parentStages。&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;01&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;private&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getParentStages&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;],&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;)&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;List&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;02&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;parents&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;HashSet&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;03&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;visited&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;HashSet&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;04&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// We are manually maintaining a stack here to prevent StackOverflowError&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;05&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// caused by recursively visiting&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;06&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Stack&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;07&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;visit&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;r&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;])&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;08&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;(!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;visited&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;r&lt;/span&gt;)) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;09&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;visited&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;r&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;10&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// Kind of ugly: need to register RDDs with the cache here since&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;11&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// we can&amp;#39;t do it in its constructor because # of partitions is unknown&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;12&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;for&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;dep&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;&amp;lt;-&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;r&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;dependencies&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;13&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;dep&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;match&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;14&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;shufDep&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;ShuffleDependency&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;, &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;, &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;15&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;parents&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getShuffleMapStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;shufDep&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;16&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;17&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;push&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;dep&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;18&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;19&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;20&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;21&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;22&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;push&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;23&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;while&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;(!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;isEmpty&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;24&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;visit&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;pop&lt;/span&gt;())&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;25&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;26&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;parents&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;toList&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;27&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;回到&lt;code&gt;handleJobSubmitted()&lt;/code&gt;,看到27、28两行，一个是&lt;em&gt;"Parents of final stage: "&lt;/em&gt;，这个是由&lt;strong&gt;getParentStages（）&lt;/strong&gt;方法获取的，而&lt;em&gt;"Missing parents: "&lt;/em&gt;，是由&lt;strong&gt;getMissingParentStages&lt;/strong&gt;获取的，在这里(handleJobSubmitted()),两者没有什么不同。但是在其他地方，调用两个函数还是会有不同效果。&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;01 &lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;private&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getMissingParentStages&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt;)&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;List&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;02 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;missing&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;HashSet&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;03 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;visited&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;HashSet&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;04 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// We are manually maintaining a stack here to prevent StackOverflowError&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;05 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// caused by recursively visiting&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;06 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Stack&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;07 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;visit&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;RDD&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;])&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;08 &lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;(!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;visited&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;)) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;09 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;visited&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;10 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;getCacheLocs&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;).&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;contains&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;Nil&lt;/span&gt;)) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;11 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;for&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;dep&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;&amp;lt;-&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;dependencies&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;12 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;dep&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;match&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;13 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;shufDep&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;ShuffleDependency&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;, &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;, &lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;14 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;mapStage&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getShuffleMapStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;shufDep&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;15 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;(!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;mapStage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;isAvailable&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;16 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;missing&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;mapStage&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;17 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;18 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;narrowDep&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;NarrowDependency&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;19 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;push&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;narrowDep&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;20 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;21 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;22 &lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;23 &lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;24 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;25 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;push&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;26 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;while&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;(!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;isEmpty&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;27 &lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;visit&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;waitingForVisit&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;pop&lt;/span&gt;())&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;28 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;29 &lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;missing&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;toList&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;30 &lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;由以上的代码可以看出，&lt;code&gt;getMissingParentStages()&lt;/code&gt;与&lt;code&gt;getParentStages()&lt;/code&gt;在第15、16行。&lt;/p&gt;
&lt;p&gt;回到&lt;code&gt;handleJobSubmitted()&lt;/code&gt;41、42行，DAGScheduler向监听总线发生一个JobStart的事件，之后，调用&lt;code&gt;submitStage()&lt;/code&gt;将生成的Stage提交&lt;/p&gt;
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;01&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;/** Submits stage, but first recursively submits any missing parents. */&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;02&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;private&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;submitStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;03&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;activeJobForStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;04&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;isDefined&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;05&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logDebug&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;submitStage(&amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;06&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;(!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingStages&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;runningStages&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;!&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;failedStages&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;)) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;07&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;missing&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getMissingParentStages&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;).&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;sortBy&lt;/span&gt;(&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;08&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logDebug&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;missing: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;missing&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;09&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;missing&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;==&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Nil&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;10&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Submitting &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;), which has no missing parents&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;11&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(204, 120, 51);"&gt;submitMissingTasks&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;get&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;12&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;else&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;13&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;for&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;parent&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;&amp;lt;-&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;missing&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;14&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;submitStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;parent&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;15&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;16&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;waitingStages&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;17&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;18&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;19&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;else&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;20&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;abortStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;No active job for stage &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;21&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;22&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;在&lt;code&gt;submitMissingTasks()&lt;/code&gt;中，DAGScheduler将stage中的tasks进行拆分，并将tasks打包成TaskSet，交给TaskScheduler处理。
&lt;div class="source" style="font-family: Monaco, Consolas, 'Lucida Console', 'Courier New'; color: rgb(220, 220, 204); background-color: rgb(63, 63, 63);"&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;01&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;/*&lt;em&gt; Called when stage&amp;#39;s parents are available and we can now do its task. &lt;/em&gt;/&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;02&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;private&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;def&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;submitMissingTasks&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;03&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logDebug&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;submitMissingTasks(&amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;04&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// Get our pending tasks and remember them in our pendingTasks entry&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;05&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;pendingTasks&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;clear&lt;/span&gt;()&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;06&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;07&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;····&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;08&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;09&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(204, 120, 51);"&gt;tasks&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Seq&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Task&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;_&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;]]&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;isShuffleMap&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;10&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;partitionsToCompute&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;map&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;11&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;locs&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getPreferredLocs&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;12&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;part&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;13&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;ShuffleMapTask&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;taskBinary&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;part&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;locs&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;14&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;15&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;else&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;16&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;resultOfJob&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;get&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;17&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;partitionsToCompute&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;map&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;18&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; p&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;Int&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;job&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;19&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;part&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;partitions&lt;/span&gt;(p)&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;20&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;val&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;locs&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;getPreferredLocs&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; p)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;21&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;ResultTask&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;taskBinary&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;part&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;locs&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;22&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;23&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;24&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;25&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;if&lt;/span&gt; (&lt;span style="color: rgb(220, 220, 204);"&gt;tasks&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;size&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(140, 208, 211);"&gt;0&lt;/span&gt;) &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;26&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// Preemptively serialize a task to make sure it can be serialized. &lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;27&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;try&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;28&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;closureSerializer&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;serialize&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;tasks&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;head&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;29&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;catch&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;30&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;&lt;span style="color: rgb(227, 206, 171);"&gt;:&lt;/span&gt; &lt;span style="color: rgb(223, 223, 191); font-weight: bold;"&gt;NotSerializableException&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;31&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;abortStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Task not serializable: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;toString&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;32&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;runningStages&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;-=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;33&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;return&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;34&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;case&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;NonFatal&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;e&lt;/span&gt;) &lt;span style="color: rgb(227, 206, 171);"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color: rgb(127, 159, 127);"&gt;// Other exceptions, such as IllegalArgumentException from Kryo.&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;35&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;abortStage&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; s&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Task serialization failed: $e\n${e.getStackTraceString}&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;36&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;runningStages&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;-=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;37&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;return&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;38&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;39&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;40&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logInfo&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Submitting &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;tasks&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;size&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot; missing tasks from &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;rdd&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;41&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;pendingTasks&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;++=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;tasks&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;42&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logDebug&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;New pending tasks: &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;pendingTasks&lt;/span&gt;)&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;43&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(204, 120, 51);"&gt;taskScheduler&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;submitTasks&lt;/span&gt;(&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;44&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(227, 206, 171);"&gt;new&lt;/span&gt; &lt;span style="color: rgb(204, 120, 51);"&gt;TaskSet&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;tasks&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;toArray&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;id&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;newAttemptId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;(),&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;jobId&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;properties&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;45&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;latestInfo&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;submissionTime&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;Some&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;clock&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;getTime&lt;/span&gt;())&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;46&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt; &lt;span style="color: rgb(227, 206, 171);"&gt;else&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;{&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;47&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// Because we posted SparkListenerStageSubmitted earlier, we should post&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;48&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(127, 159, 127);"&gt;// SparkListenerStageCompleted here in case there are no tasks to run.&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;49&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;listenerBus&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;post&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;SparkListenerStageCompleted&lt;/span&gt;(&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;latestInfo&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(248, 16, 176);"&gt;50&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;logDebug&lt;/span&gt;(&lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot;Stage &amp;quot;&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;+&lt;/span&gt; &lt;span style="color: rgb(204, 147, 147);"&gt;&amp;quot; is actually done; %b %d %d&amp;quot;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;format&lt;/span&gt;(&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;51&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;isAvailable&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;numAvailableOutputs&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;,&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;.&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;numPartitions&lt;/span&gt;))&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;52&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;runningStages&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;-=&lt;/span&gt; &lt;span style="color: rgb(220, 220, 204);"&gt;stage&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;53&amp;nbsp;&lt;/span&gt; &amp;nbsp;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span style="color: rgb(127, 159, 127);"&gt;54&amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(220, 220, 204);"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下来的工作，就交给TaskScheduler解决了。&lt;/p&gt;
&lt;p&gt;有时间再整理一下吧&lt;/p&gt;</summary><category term="spark"></category><category term="source code"></category><category term=""></category></entry><entry><title>Ganlia采样、统计及RRD记录周期（频次、间隔）的配置和更改</title><link href="http://www.guozhongxin.com/pages/2014/10/15/ganglia_frequency.html" rel="alternate"></link><updated>2014-10-15T22:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2014-10-15:pages/2014/10/15/ganglia_frequency.html</id><summary type="html">&lt;h2&gt;Ganglia &amp;amp; RRD&lt;/h2&gt;
&lt;p&gt;Ganglia是伯克利开发的一个集群监控软件。可以监视和显示集群中的节点的各种状态信息，比如如：cpu 、mem、硬盘利用率， I/O负载、网络流量情况等，同时可以将历史数据以曲线方式通过php页面呈现。&lt;/p&gt;
&lt;p&gt;Ganglia监控系统的核心有两部分：gmond 和 gmetad：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gmond在各个节点上运行，负责采集数据；&lt;/li&gt;
&lt;li&gt;gmetad在主节点上运行，负责接收gmond采集上来的数据并将之储存在RRD中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RRD（Round-Robin Database）是一种固定大小的环形的数据库，一个RRD文件下可以有多个RRA，每个RRA是一个环，环上可以储存的数据个数是固定个，新的数据被记录时会覆盖最旧的那条数据，从而周而复始的记录。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="http://www.guozhongxin.com/images/RRD.jpg" /&gt; &lt;/p&gt;
&lt;p&gt;Ganglia将监控数据以RRD的形式储存并通过php展示在web页面上。Ganglia默认的是15秒在RRD中记录一次数据，而RRD默认的格式为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RRAs &amp;quot;RRA:AVERAGE:0.5:1:244&amp;quot; &amp;quot;RRA:AVERAGE:0.5:24:244&amp;quot; &amp;quot;RRA:AVERAGE:0.5:168:244&amp;quot; &amp;quot;RRA:AVERAGE:0.5:672:244&amp;quot; &amp;quot;RRA:AVERAGE:0.5:5760:374&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是Ganglia创建的RRD的默认形式，一个RRD文件有四个RRA用来记录数据。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一个RRA一共储存着244个数据，每插入一条数据储存一个数据，Ganglia默认的15s记录一次，这就意味着默认的这个RRA记录着最近61分钟的数据，这也就是在web上看到的一小时的图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个RRA一共储存着244个数据，每插入24条数据取平均数，储存一个数据，15s * 24 = 360s，意味着6分钟储存一条数据。总共记录了 6min * 244 = 1464min = 24.4h 约为一天的数据。对应的是web上最近24h的数据图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三个RRA，每插入168条数据取平均数储存一条数据，15s * 168 = 42min，42分钟记录一条数据，总共记录 42min * 244 = 7.1d 约为一周的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第四个RRA，记录最近四周的数据。对应web界面上Last month的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;第五个RRA记录最近一年的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;为什么要更改Ganlia采样、统计及RRD记录的最小间隔&lt;/h2&gt;
&lt;p&gt;对于简单的集群监控，Ganglia的默认配置是足够的，能够满足集群管理员发现集群的性能表现和一些故障，并判断故障发生在哪里。  &lt;/p&gt;
&lt;p&gt;但是在进行细致的作业分析时，15s的最小采样间隔是不能够满足需求的。&lt;/p&gt;
&lt;p&gt;以笔者研究的spark作业的性能表现为例，对于40G的数据，在4节点、16GB per node、32 cores per node的Spark集群上进行wordcount，作业的总共运行时间平均为53s，而map stage中每个task的运行时间在10s左右，reduce&amp;amp;save stage中每个task的运行时间不过2-4s。&lt;/p&gt;
&lt;p&gt;由于spark高效的执行效率，spark运行过程中占用集群资源的行为变化是迅速的，15s的记录间隔是无法察觉的。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;为了让Ganglia能够更好的适应Spark的节奏，需要将Ganlia采样、统计及RRD记录的最小间隔由15s改到更小&lt;/strong&gt;，笔者直接选择在&lt;strong&gt;1s&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;更改Ganglia配置参数，以更改采样和记录的最小间隔&lt;/h2&gt;
&lt;h3&gt;停止Ganglia的运行&lt;/h3&gt;
&lt;p&gt;为了避免出现运行错误，在更改配置前关闭ganglia的运行。&lt;/p&gt;
&lt;p&gt;在主节点上，使用命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service gmetad stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在各个节点上，使用命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service gmond stop
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更改gmond配置（更改搜集数据的周期，以及传输传输周期）&lt;/h3&gt;
&lt;p&gt;gmond的配置在/etc/ganglia/gmond.conf中&lt;/p&gt;
&lt;p&gt;对于只取一次值的metric，将&lt;code&gt;time_threshold&lt;/code&gt;，因为这些值，如&lt;code&gt;mem_total&lt;/code&gt;，会在web端php画图时用到，因为memory那张图中的&lt;code&gt;memory used&lt;/code&gt;，并不是通过直接采集数据得到的，而是通过&lt;code&gt;mem_total&lt;/code&gt;减去其他值计算得到的，因此，&lt;code&gt;mem_total&lt;/code&gt;一开始就应该被获取，因此&lt;code&gt;time_threshold&lt;/code&gt;需设为1（默认为1200）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;collection_group {
  collect_once = yes
  time_threshold = 1
  metric {
    name = &amp;quot;cpu_num&amp;quot;
    title = &amp;quot;CPU Count&amp;quot;
  }
  ...
  metric {
    name = &amp;quot;mem_total&amp;quot;
    title = &amp;quot;Memory Total&amp;quot;
  }
  ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于其他metric，如cpu group中的各个metric，采样与传输的时间也应设置为1（s）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;collection_group {
  collect_every = 20
  time_threshold = 90
  /* CPU status */
  metric {
    name = &amp;quot;cpu_user&amp;quot;
    value_threshold = &amp;quot;1.0&amp;quot;
    title = &amp;quot;CPU User&amp;quot;
  }
  metric {
    name = &amp;quot;cpu_system&amp;quot;
    value_threshold = &amp;quot;1.0&amp;quot;
    title = &amp;quot;CPU System&amp;quot;
  }
  ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;collect_every = 1
time_threshold = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更改gmetad配置（更改记录的最小间隔）&lt;/h3&gt;
&lt;p&gt;gmetad的配置在/etc/ganglia/gmetad.conf中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Format: &lt;/span&gt;
&lt;span class="cp"&gt;# data_source &amp;quot;my cluster&amp;quot; [polling interval] address1:port addreses2:port ...&lt;/span&gt;
&lt;span class="cp"&gt;# The keyword &amp;#39;data_source&amp;#39; must immediately be followed by a unique&lt;/span&gt;
&lt;span class="cp"&gt;# string which identifies the source, then an optional polling interval in &lt;/span&gt;
&lt;span class="cp"&gt;# seconds. The source will be polled at this interval on average. &lt;/span&gt;
&lt;span class="cp"&gt;# If the polling interval is omitted, 15sec is asssumed.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看到这里有关于&lt;code&gt;[polling interval]&lt;/code&gt;的解释，即gmetad会根据从gmond搜集的数据，每一个间隔计算出这个间隔内的平均数将其写入rrd。&lt;br /&gt;
而这个参数，是一个非必要的参数，如果用户不指定的话，每15s记录一次。&lt;/p&gt;
&lt;p&gt;因此，为了将Ganglia记录最小间隔及RRD中数据的最小时间间隔改为1s，需要在master名称后添加一个参数：1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;data_source &amp;quot;my cluster&amp;quot; 1 localhost  my.machine.edu:8649 ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了让web依然能够顺利的画出一天、一周、一月、一年的图，还应该修改RRD的格式。&lt;/p&gt;
&lt;p&gt;原来的采样间隔是15s，现在的采样间隔是1s，就要把每个RRA的容量扩充，或者将除了第一个RRA之外的RRA的记录间隔改大。&lt;/p&gt;
&lt;p&gt;两种调整RRD格式的方法：&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RRAs &amp;quot;RRA:AVERAGE:0.5:1:3660&amp;quot; &amp;quot;RRA:AVERAGE:0.5:24:3660&amp;quot; &amp;quot;RRA:AVERAGE:0.5:168:3660&amp;quot; &amp;quot;RRA:AVERAGE:0.5:672:3660&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RRAs &amp;quot;RRA:AVERAGE:0.5:1:3660&amp;quot; &amp;quot;RRA:AVERAGE:0.5:360:244&amp;quot; &amp;quot;RRA:AVERAGE:0.5:2520:244&amp;quot; &amp;quot;RRA:AVERAGE:0.5:10080:244&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为我只需要近一小时的详细数据，因此，我采用第二种方式，RRD的文件会小一些。&lt;/p&gt;
&lt;h3&gt;清除原有RRD&lt;/h3&gt;
&lt;p&gt;因为RRD的格式发生变化，和原有的RRD不同，因此，需要将原来的RRD删除，&lt;/p&gt;
&lt;p&gt;RRD的文件储存位置的配置在gmetad.conf中：&lt;code&gt;rrd_rootdir&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rrd_rootdir&lt;/code&gt;的默认位置在&lt;code&gt;/var/lib/ganglia/rrds&lt;/code&gt;，将这个文件夹下的所有文件及文件夹删除即可。&lt;/p&gt;
&lt;h3&gt;启动Ganglia&lt;/h3&gt;
&lt;p&gt;在主节点上，使用命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service gmetad start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在各个节点上，使用命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service gmond start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;查看更改之后的效果&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service httpd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在http://masterhost/ganglia中可以看到更改之后的变化：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://www.guozhongxin.com/images/ganglia_old.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://www.guozhongxin.com/images/ganglia_new.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://www.guozhongxin.com/images/ganglia_big.png" /&gt;&lt;/p&gt;
&lt;p&gt;最后一张图明显能看出更改之后统计的数据更细腻。&lt;/p&gt;</summary><category term="ganglia"></category><category term=""></category></entry><entry><title>Windows + IDEA + SBT 打造Spark源码阅读环境</title><link href="http://www.guozhongxin.com/pages/2014/10/15/spark_source_code.html" rel="alternate"></link><updated>2014-10-15T11:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2014-10-15:pages/2014/10/15/spark_source_code.html</id><summary type="html">&lt;h2&gt;Spark源码阅读环境的准备&lt;/h2&gt;
&lt;p&gt;Spark源码是有Scala语言写成的，目前，&lt;a href="/http://www.jetbrains.com/idea/"&gt;IDEA&lt;/a&gt;对Scala的支持要比eclipse要好，大多数人会选在在IDEA上完成Spark平台应用的开发。因此，Spark源码阅读的IDE理所当然的选择了IDEA。&lt;/p&gt;
&lt;p&gt;本文介绍的是Windows下的各项配置方法（默认已经装了java，JDK）。&lt;/p&gt;
&lt;p&gt;下面列举搭建此环境需要的各个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jetbrains.com/idea/download/"&gt;&lt;strong&gt;IDEA&lt;/strong&gt;&lt;/a&gt;，有两个版本：Ultimate Edition &amp;amp; Community Edition，后者是free的，而且完全能满足学习者所有的需求  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scala-lang.org/download/"&gt;&lt;strong&gt;Scala&lt;/strong&gt;&lt;/a&gt;，Spark是用Scala语言写成的，在本地编译执行需要这个包&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scala-sbt.org/download.html"&gt;&lt;strong&gt;SBT&lt;/strong&gt;&lt;/a&gt;，scala工程构建的工具&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git-scm.com/download/"&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt;，IDEA自动下载SBT插件时可能会用到的工具&lt;/li&gt;
&lt;li&gt;&lt;a href="http://spark.apache.org/downloads.html"&gt;&lt;strong&gt;Spark Source Code&lt;/strong&gt;&lt;/a&gt;，Spark源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载各个安装包。&lt;/p&gt;
&lt;h2&gt;Spark源码阅读环境的安装步骤&lt;/h2&gt;
&lt;h4&gt;安装&lt;a href="http://www.scala-lang.org/download/"&gt;Scala&lt;/a&gt;。&lt;/h4&gt;
&lt;p&gt;完成后，在windows命令行中输入&lt;code&gt;scala&lt;/code&gt;，检查是否识别此命令。&lt;br /&gt;
如果不识别，查看环境变量Path中是否有&lt;code&gt;....\scala\bin&lt;/code&gt;（我的电脑右键，属性 -&amp;gt; 高级系统设置 -&amp;gt; 环境变量）,没有的手动将Scala文件夹下的bin目录的路径&lt;/p&gt;
&lt;h4&gt;安装&lt;a href="http://www.scala-sbt.org/download.html"&gt;SBT&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;运行SBT的安装程序，运行完成后，重新打开windows命令行，输入&lt;code&gt;sbt&lt;/code&gt;，检查是否识别此命令。没有的话，手动配置环境变量，添加&lt;code&gt;...\sbt\bin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行完SBT的安装程序之后，并不意味着完成了sbt的安装，在windows命令放下输入&lt;code&gt;sbt&lt;/code&gt;后，SBT会自动的下载安装它所需要的程序包，请耐心等待全部下载成功。&lt;/p&gt;
&lt;h4&gt;安装&lt;a href="http://git-scm.com/download/"&gt;Git&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;运行Git的安装程序，安装完成后，重新打开windows命令行，检查时候识别&lt;code&gt;git&lt;/code&gt;命令。&lt;/p&gt;
&lt;h4&gt;安装&lt;a href="http://www.jetbrains.com/idea/download/"&gt;IDEA&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;安装IDEA的Scala插件&lt;/h4&gt;
&lt;p&gt;打开IDEA，在‘Welcome to IntelliJ IDEA’界面的‘Quick Start’栏，点击&lt;code&gt;Configure&lt;/code&gt;，选择&lt;code&gt;Plugins&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;在弹出的窗口中可以看到已安装的插件，现在IDEA默认还没有Scala的插件。需要点击左下角的&lt;code&gt;Install JetBrains plugin...&lt;/code&gt;，在搜索框中输入‘scala’，点击安装。安装完成后可能会要求重启一下IDEA。&lt;/p&gt;
&lt;h4&gt;解压缩Spark Source Code包&lt;/h4&gt;
&lt;h2&gt;导入Spark工程&lt;/h2&gt;
&lt;p&gt;在欢迎界面‘Quick Start’栏或者是在主界面的菜单栏&lt;code&gt;File&lt;/code&gt;下，选&lt;code&gt;Import Project&lt;/code&gt;，找到解压之后的spark工程文件夹，&lt;code&gt;OK&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;选择&lt;code&gt;import project from external model&lt;/code&gt;中的&lt;code&gt;SBT project&lt;/code&gt;，（这个选项只有在安装了IDEA的Scala插件才会有）。&lt;/p&gt;
&lt;p&gt;下一步，选择Project SDK为JDK，最好勾上&lt;code&gt;Use auto-import&lt;/code&gt;，然后点击&lt;code&gt;Finish&lt;/code&gt;。这时，&lt;strong&gt;IDEA会自动下载安装SBT所需的各个包&lt;/strong&gt;，没有装Git的话可能会报错。&lt;/p&gt;
&lt;p&gt;因为Spark是一个比较大的工程，所需的包也很多，这个过程也会特别慢，请耐心等待。&lt;/p&gt;
&lt;h4&gt;导入完成&lt;/h4&gt;
&lt;p&gt;导入完成后，自动打开工程，要等一段时间，等待sbt对这个工程进行编译。&lt;/p&gt;</summary><category term="spark"></category><category term="源码"></category></entry><entry><title>Spark简介</title><link href="http://www.guozhongxin.com/pages/2014/10/12/a_brief_in_spark.html" rel="alternate"></link><updated>2014-10-12T21:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2014-10-12:pages/2014/10/12/a_brief_in_spark.html</id><summary type="html">&lt;h1&gt;目录：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Spark综述&lt;/li&gt;
&lt;li&gt;Spark计算模型：RDD，算子，stage，&lt;/li&gt;
&lt;li&gt;Spark架构及工作流程&lt;/li&gt;
&lt;li&gt;Spark组件&lt;/li&gt;
&lt;li&gt;Spark配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Spark综述--Spark是什么&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;基于内存的分布式并行计算框架&lt;/li&gt;
&lt;li&gt;一种粗粒度数据并行（data parallel）的计算范式（相对于 task parallel）&lt;/li&gt;
&lt;li&gt;以RDD(弹性分布式数据集)为计算对象&lt;/li&gt;
&lt;li&gt;核心代码两万行，轻量级分布式系统&lt;/li&gt;
&lt;li&gt;支持Hadoop2.0，支持HDFS&lt;/li&gt;
&lt;li&gt;支持内存计算、多迭代批量处理、即席查询、流处理和图计算  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Spark计算模型&lt;/h1&gt;
&lt;h3&gt;弹性的分布数据集(RDD)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分布式对象集合能够跨集群在内存中保存。多个并行操作，失败自动恢复。&lt;/li&gt;
&lt;li&gt;A list of partitions;&lt;/li&gt;
&lt;li&gt;A function for computing each split&lt;/li&gt;
&lt;li&gt;A list of dependencies on other RDDs: HadoopRDD，ShuffledRDD，PartitionPruningRDD…  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;算子&lt;/h3&gt;
&lt;p&gt;算子，即对数据集RDD进行操作的函数。&lt;br /&gt;
Spark计算模型中，总共涉及四种算子。    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入算子：val lines = sc.textFile("data.txt")&lt;/li&gt;
&lt;li&gt;缓存算子：lines.cache(), lines.persist()&lt;/li&gt;
&lt;li&gt;变换算子(Transformations)： create a new dataset from an existing one，由一个（或多个）已存在的RDD转换成另外一个RDD：map(), filter(), group(), flatmap()…&lt;/li&gt;
&lt;li&gt;行动算子(Actions)： return a value to the driver program after running a computation on the dataset，由RDD转换成：reduce(), count()…  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图可以较为清楚的理解四种算子：&lt;br /&gt;
&lt;img alt="1" src="http://www.guozhongxin.com/images/suanzi.png" /&gt;  &lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;算子的执行&lt;/h4&gt;
&lt;p&gt;从RDD到RDD的变换算子序列，一直在RDD空间发生。这里很重要的设计是&lt;code&gt;lazy evaluation&lt;/code&gt;：计算并不实际发生，只是不断地记录到元数据。元数据的结构是&lt;code&gt;DAG&lt;/code&gt;（有向无环图），其中每一个“顶点”是RDD（包括生产该RDD 的算子），从父RDD到子RDD有“边”，表示RDD间的依赖性。Spark给元数据DAG取了个很酷的名字，&lt;code&gt;Lineage&lt;/code&gt;（世系）。  &lt;/p&gt;
&lt;p&gt;Lineage一直增长，直到遇上行动（action）算子（图1中的绿色箭头），这时 就要evaluate了，把刚才累积的所有算子一次性执行。行动算子的输入是RDD（以及该RDD在Lineage上依赖的所有RDD），输出是执行后生 成的原生数据，可能是Scala标量、集合类型的数据或存储。当一个算子的输出是上述类型时，该算子必然是行动算子，其效果则是从RDD空间返回原生数据 空间。&lt;/p&gt;
&lt;p&gt;另一个要点是一旦行动算子产生原生数据，就必须退出RDD空间。因为目前Spark只能够跟踪RDD的计算，原生数据的计算对它来说是不可见的（除非以后 Spark会提供原生数据类型操作的重载、wrapper或implicit conversion）。&lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;shuffle（重排）&lt;/h4&gt;
&lt;p&gt;涉及重排，称为shuffle类操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对单个RDD重排，如sort、partitionBy（实现一致性的分区划分，这个对数据本地性优化很重要，后面会讲）；&lt;/li&gt;
&lt;li&gt;对单个RDD基于key进行重组和reduce，如groupByKey、reduceByKey；&lt;/li&gt;
&lt;li&gt;对两个RDD基于key进行join和重组，如join、cogroup。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;宽依赖与窄依赖&lt;/h3&gt;
&lt;p&gt;&lt;img alt="2" src="http://www.guozhongxin.com/images/dependency.png" /&gt;  &lt;/p&gt;
&lt;p&gt;左侧为窄依赖，右侧为宽依赖  &lt;/p&gt;
&lt;p&gt;宽依赖与窄依赖的最主要区别在于，宽依赖关系涉及到shuffle过程，而窄依赖不涉及shuffle。  &lt;/p&gt;
&lt;h3&gt;Stage&lt;/h3&gt;
&lt;p&gt;Stage是Spark对DAG的划分，以此作为对作业的进行任务（task）划分和调度的依据。&lt;br /&gt;
可以这样理解Stage不需要shuffle是可以随意并发的, 所以stage的边界就是需要shuffle的地方。&lt;/p&gt;
&lt;p&gt;下图是一个stage例子。
&lt;img alt="3" src="http://www.guozhongxin.com/images/stage.png" /&gt; &lt;/p&gt;
&lt;h3&gt;共享变量（Shared Variables）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;广播变量：&lt;br /&gt;
    允许程序员保留一个只读的变量，缓存在每一台机器上，而非每个任务。被创建后，它能在集群运行的任何函数上，需要被再次传递到这些结点上。
    通过SparkContext.broadcast(v)方法创建。
    对象v不能在被广播后修改，是只读的。&lt;/li&gt;
&lt;li&gt;累加器：&lt;br /&gt;
    通过调用SparkContext.accumulator(V)方法来创建。
    运行在集群上的任务，可以使用+=来加值。然而，它们不能读取计数器的值。
    当Driver程序可以使用.value方法读取该值&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Spark架构&lt;/h1&gt;
&lt;p&gt;先给一个概况图：&lt;br /&gt;
&lt;img alt="4" src="http://www.guozhongxin.com/images/jiagou.png" /&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建Spark Application运行环境；&lt;br /&gt;
    在Driver Program中新建SparkContext（包含sparkcontext的程序称为Driver Program）；
    Spark Application运行的表现方式为：在集群上运行着一组独立的executor进程，这些进程由sparkcontext来协调；&lt;/li&gt;
&lt;li&gt;SparkContext向资源管理器申请运行Executor资源，并启动StandaloneExecutorBackend，executor向sparkcontent申请task；
    集群通过SparkContext连接到不同的cluster manager(standalone、yarn、mesos)，cluster manager为运行应用的Executor分配资源；一旦连接建立之后，Spark每个Application就会获得各个节点上的Executor（进程）；每个Application都有自己独立的executor进程；Executor才是真正运行在WorkNode上的工作进程，它们为应用来计算或者存储数据；&lt;/li&gt;
&lt;li&gt;SparkContext获取到executor之后，Application的应用代码将会被发送到各个executor；&lt;/li&gt;
&lt;li&gt;SparkContext构建RDD DAG图，将RDD DAG图分解成Stage DAG图，将Stage提交给TaskScheduler，最后由TaskScheduler将Task发送给Executor运行；&lt;/li&gt;
&lt;li&gt;Task在Executor上运行，运行完毕后释放所有资源；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Spark通用的使用方式主要有两种：standalone、spark on yarn&lt;/p&gt;
&lt;h3&gt;standalone&lt;/h3&gt;
&lt;p&gt;基于standalone的Spark架构与作业执行流程（Driver运行在客户端上）：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="http://www.guozhongxin.com/images/standalone.png" /&gt; &lt;/p&gt;
&lt;p&gt;作业执行流程描述：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端启动后直接运行用户程序，启动Driver相关的工作：DAGScheduler和BlockManagerMaster等。&lt;/li&gt;
&lt;li&gt;客户端的Driver向Master注册。&lt;/li&gt;
&lt;li&gt;Master还会让Worker启动Exeuctor。Worker创建一个ExecutorRunner线程，ExecutorRunner会启动ExecutorBackend进程。&lt;/li&gt;
&lt;li&gt;ExecutorBackend启动后会向Driver的SchedulerBackend注册。Driver的DAGScheduler解析作业并生成相应的Stage，每个Stage包含的Task通过TaskScheduler分配给Executor执行。&lt;/li&gt;
&lt;li&gt;所有stage都完成后作业结束。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Spark on Yarn&lt;/h3&gt;
&lt;p&gt;基于Yarn的Spark架构与作业执行流程：&lt;br /&gt;
&lt;img alt="6" src="http://www.guozhongxin.com/images/taobao.png" /&gt; &lt;/p&gt;
&lt;p&gt;基于YARN的Spark作业首先由客户端生成作业信息，提交给ResourceManager，ResourceManager在某一NodeManager汇报时把AppMaster分配给NodeManager，NodeManager启动 SparkAppMaster，SparkAppMaster启动后初始化作业，然后向ResourceManager申请资源，申请到相应资源后 SparkAppMaster通过RPC让NodeManager启动相应的SparkExecutor，SparkExecutor向 SparkAppMaster汇报并完成相应的任务。此外，SparkClient会通过AppMaster获取作业运行状态。&lt;/p&gt;
&lt;p&gt;Spark on Yarn这种模式因为淘宝技术部在内部平台上的应用而被许多其他使用者模仿，其实根据笔者的感受来讲，绝大多数类型的任务spark着standalone的模式下就能很好的运行，并有不次于Spark on Yarn的执行效率。   &lt;/p&gt;
&lt;h1&gt;Spark组件&lt;/h1&gt;
&lt;h3&gt;DAGScheduler&lt;/h3&gt;
&lt;p&gt;DAGScheduler主要功能如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收用户提交的job;&lt;/li&gt;
&lt;li&gt;将job根据类型划分为不同的stage，记录哪些RDD、Stage被物化，并在每一个stage内产生一系列的task，并封装成TaskSet；&lt;/li&gt;
&lt;li&gt;决定每个Task的最佳位置(任务在数据所在的节点上运行)，并结合当前的缓存情况；将TaskSet提交给TaskScheduler;&lt;/li&gt;
&lt;li&gt;重新提交Shuffle输出丢失的Stage给TaskScheduler；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：一个Stage内部的错误不是由shuffle输出丢失造成的，DAGScheduler是不管的，由TaskScheduler负责尝试重新提交task执行；&lt;/p&gt;
&lt;h3&gt;TaskScheduler&lt;/h3&gt;
&lt;p&gt;TaskScheduler是一个可插拔任务调度接口，主要功能如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个TaskScheduler只为一个SparkContext服务，接收DAGScheduler提交过来的一组组的TaskSet；&lt;/li&gt;
&lt;li&gt;TaskScheduler将task提交到集群中并执行，如果其中某个Task执行失败则重试之；TaskScheduler将TaskSet对应的执行结果返回DAGScheduler；&lt;/li&gt;
&lt;li&gt;处理straggle任务；（比如：100个任务运行，其中99个任务快，1个任务慢，需要在另外一个节点上开启一个相同的任务来运行，谁先完成取用谁）；&lt;/li&gt;
&lt;li&gt;遇到shuffle输出丢失则汇报给DAGScheduler；&lt;/li&gt;
&lt;li&gt;为每个TaskSet维护一个TaskSetManager追踪本地性(resourceOffer--&amp;gt;findTask)及错误信息；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Storage模块&lt;/h3&gt;
&lt;p&gt;主要分为两层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信层：storage模块采用的是master-slave结构来实现通信层，master和slave之间传输控制信息、状态信息，这些都是通过通信层来实现的。&lt;/li&gt;
&lt;li&gt;存储层：storage模块需要把数据存储到disk或是memory上面，有可能还需replicate到远端，这都是由存储层来实现和提供相应接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他模块若要和storage模块进行交互，storage模块提供了统一的操作类BlockManager，外部类与storage模块打交道都需要通过调用BlockManager相应接口来实现&lt;/p&gt;
&lt;h1&gt;Spark配置&lt;/h1&gt;
&lt;h3&gt;Spark集群配置&lt;/h3&gt;
&lt;p&gt;配置文件：$SPARK_HOME/conf/spark-env.sh
主要的配置参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPARK_MASTER_IP, to bind the master to a different IP address or hostname&lt;/li&gt;
&lt;li&gt;SPARK_WORKER_CORES, to set the number of cores to use on this machine&lt;/li&gt;
&lt;li&gt;SPARK_WORKER_MEMORY, to set how much total memory workers have to give executors (e.g. 1000m, 2g)&lt;/li&gt;
&lt;li&gt;SPARK_WORKER_INSTANCES, to set the number of worker processes per node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例：一共5台机器，每台24个cpu cores，每台机器上有90GB内存：
    export SPARK_WORKER_MEMORY=30000m
    export SPARK_WORKER_CORES=8
    export SPARK_WORKER_INSTANCES=3
另外还有一些关于Hadoop的配置参数，这是为了Spark on Yarn的工作模式提供的，如果你只使用Standalone模式，则不需要配置。&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://spark.apache.org/docs/latest/configuration.html"&gt;Saprk执行作业属性&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&amp;gt;&amp;gt;配置方式&lt;/h4&gt;
&lt;p&gt;在Spark1.0.x提供了3种方式的属性配置：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SparkConf方式，在代码中配置各个参数；&lt;/li&gt;
&lt;li&gt;命令行参数方式
    使用spark-submit或spark-shell提交应用程序时用命令行参数提交；&lt;/li&gt;
&lt;li&gt;文件配置方式
    在$SPARK_HOME/conf/spark_default.conf里进行配置；该方式是将属性配置项以键值对方式写入文本文件中，一个配置项占一行；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优先权：&lt;br /&gt;
    SparkConf方式 &amp;gt; 命令行参数方式 &amp;gt;文件配置方式&lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;查看Spark属性配置&lt;/h4&gt;
&lt;p&gt;在应用程序执行过程中，通过应用程序的webUI（地址http://&lt;driver&gt;:4040）可以查看Spark属性配置，从而检查属性配置是否正确；&lt;br /&gt;
只是显示通过上面三种方式显式指定的属性配置，对于其他属性可以假定使用默认配置；&lt;br /&gt;
对于大多数内部控制属性，系统已经提供了合理的默认配置。  &lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;Spark日志属性配置&lt;/h4&gt;
&lt;p&gt;Spark日志：log4j，配置文件：$SPARK_HOME/conf/log4j.properties&lt;/p&gt;
&lt;p&gt;Spark job(Application)日志，计数器：通过刚才提到的三种方式中的任意一种，对一下Spark Conf进行配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;spark.eventLog.enabled=true;  
spark.eventLog.dir=hdfs:\\...
&lt;/pre&gt;&lt;/div&gt;</summary><category term="spark"></category><category term=""></category></entry><entry><title>Spark安装：Spark集群及开发环境搭建</title><link href="http://www.guozhongxin.com/pages/2014/09/26/spark_installation.html" rel="alternate"></link><updated>2014-09-26T23:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2014-09-26:pages/2014/09/26/spark_installation.html</id><summary type="html">&lt;h2&gt;安装Spark准备&lt;/h2&gt;
&lt;p&gt;在准备安装spark之前，需要准备以下安装包，并完成以下预备动作。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scala安装包，可以在&lt;a href="http://www.scala-lang.org/"&gt;scala官方网站&lt;/a&gt;下载&lt;/li&gt;
&lt;li&gt;spark安装包，可以在&lt;a href="http://spark.apache.org/downloads.html"&gt;spark官网&lt;/a&gt;下载，用两种形式的安装包：&lt;ul&gt;
&lt;li&gt;source code package&lt;/li&gt;
&lt;li&gt;pre-build package&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在主节点实现ssh免密码登陆其他节点。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;install scala - scala安装&lt;/h3&gt;
&lt;p&gt;download scala-2.10.4.tgz and unzip： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;tar -zxf scala-2.10.4.tgz&lt;/span&gt;
&lt;span class="x"&gt;vi ~/.bashrc&lt;/span&gt;
&lt;span class="x"&gt;    export SCALA_HOME=...   &lt;/span&gt;
&lt;span class="x"&gt;    export PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SCALA_HOME&lt;/span&gt;&lt;span class="x"&gt;/bin&lt;/span&gt;
&lt;span class="x"&gt;source ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;install spark. - spark安装&lt;/h3&gt;
&lt;p&gt;There are two types of spark installation package, source package that you need build spark at first, and prebuild package.  &lt;/p&gt;
&lt;p&gt;Spark的安装包有两种形式：源码包（用户需要自己下载后在平台上编译），以及已经编译打包好的安装包&lt;/p&gt;
&lt;p&gt;To build source package, you should unzip the package and edit pom.xml in the directory, change &lt;hadoop.version&gt;&lt;/hadoop.version&gt; and some jars' version: protobuf, hbase, hive. Then, you can run this command :    &lt;/p&gt;
&lt;p&gt;在用源码包安装时，你需要先解压缩安装包，然后修改文件夹中中pom.xml文件，将hadoop、protobuf、hbase、hive的版本号修改为当前环境的版本。之后在这个文件夹下运行这条命令：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./make-distribution.sh --hadoop 2.4.0 --with-yarn --with-hive --with-tachyon --tgz --skip-java-test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you choose prebuild package with the right hadoop version, you needn't build it by yourself.   &lt;/p&gt;
&lt;p&gt;如果你选择了已经build好的安装包，以上步骤不需执行。&lt;/p&gt;
&lt;p&gt;将自己编译或是下载的编译包解压缩，并配置环境变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;tar -zxf spark-1.0.0-bin-2.2.0.tgz&lt;/span&gt;
&lt;span class="x"&gt;vi ~/.bashrc&lt;/span&gt;
&lt;span class="x"&gt;    export SCALA_HOME=...  &lt;/span&gt;
&lt;span class="x"&gt;    export PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SCALA_HOME&lt;/span&gt;&lt;span class="x"&gt;/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SCALA_HOME&lt;/span&gt;&lt;span class="x"&gt;/sbin&lt;/span&gt;
&lt;span class="x"&gt;source ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configure Spark cluster - Spark集群配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;edit &lt;code&gt;$SPARK_HOME/conf/slaves&lt;/code&gt;, and input all node IP :  &lt;/p&gt;
&lt;p&gt;masters&lt;br /&gt;
slave1&lt;br /&gt;
slave2&lt;br /&gt;
slave3 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create and edit &lt;code&gt;$SPARK_HOME/conf/spark_env.sh&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;export HADOOP_HOME=/opt/apache/hadoop-2.4.0&lt;br /&gt;
export HADOOP_CONF_DIR=/opt/apache/hadoop-2.4.0/etc/hadoop&lt;br /&gt;
export JAVA_HOME=/usr/local/jdk1.7.0_60&lt;br /&gt;
export SCALA_HOME=/home/yarn/scala-2.10.4  &lt;/p&gt;
&lt;p&gt;export SPARK_WORKER_MEMORY=16g&lt;br /&gt;
export SPARK_WORKER_INSTANCES=1&lt;br /&gt;
export SPARK_MASTER_IP=master&lt;/p&gt;
&lt;p&gt;实际上安装好之后&lt;code&gt;conf&lt;/code&gt;文件夹下有一个&lt;code&gt;spark_env.sh&lt;/code&gt;的模板，里边有各个变量的解释说明，在这不一一累述  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy to other node &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要将各个节点上的这两个文件都进行配置&lt;/p&gt;
&lt;h3&gt;Configure Spark App - Spark作业属性配置&lt;/h3&gt;
&lt;p&gt;对于作业执行的属性配置，spark提供了三种不同的配置方法  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;create and edit &lt;code&gt;$SPARK_HOME/conf/spark_default.conf&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;spark.master                    spark://master:7077&lt;br /&gt;
spark.eventLog.enabled          true&lt;br /&gt;
spark.eventLog.dir              hdfs://master:8020/sparklog&lt;br /&gt;
spark.local.dir                  ...  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在通过$SPARK_HOME/bin/spark-submit这个脚本提交作业时，通过 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SPARK_HOME&lt;/span&gt;&lt;span class="x"&gt;/bin/spark-submit  /&lt;/span&gt;
&lt;span class="x"&gt;--master spark://master:7077  /&lt;/span&gt;
&lt;span class="x"&gt;--conf spark.eventLog.enabled=true ...  /&lt;/span&gt;
&lt;span class="x"&gt;***.jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过代码中对SparkContext来对这些属性赋值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三种方法的优先级是：&lt;br /&gt;
    3 高于 2 高于1  &lt;/p&gt;
&lt;h3&gt;Tips&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you change SPARK_WORKER_INSTANCES, CHECK worker's process in every node&lt;br /&gt;
If old worker's process is still working , you can use this command to kill them:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ps -ef | grep Worker | grep -v grep | cut -c 9-15 | xargs kill -s 9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and restart Spark Cluster  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you want to start history server, you should assign logs' path:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SPARK_HOME&lt;/span&gt;&lt;span class="x"&gt;/sbin/start-historyserver.sh  &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SPARK_HOME&lt;/span&gt;&lt;span class="x"&gt;/logs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you wanna save a job's log, you should assign two properties:  &lt;/p&gt;
&lt;p&gt;spark.eventLog.enabled          true&lt;br /&gt;
spark.eventLog.dir              hdfs://master:8020/sparklog  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="spark"></category><category term="开发环境"></category><category term=""></category></entry><entry><title>pelican建站攻略补充（站内搜索，和标签云）</title><link href="http://www.guozhongxin.com/pages/2014/09/25/build_blog_with_pelican.html" rel="alternate"></link><updated>2014-09-25T21:00:00+08:00</updated><author><name>guozhongxin</name></author><id>tag:www.guozhongxin.com,2014-09-25:pages/2014/09/25/build_blog_with_pelican.html</id><summary type="html">&lt;h2&gt;pelican建站准备&lt;/h2&gt;
&lt;p&gt;参见lizherui的&lt;a href="http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt;一步一步打造Geek风格的技术博客&lt;/a&gt;，不累述&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;添加站内搜索&lt;/h2&gt;
&lt;p&gt;由于原日志中关于添加google站内搜索的链接失效，在其他地方没有看到特别好的介绍。&lt;br /&gt;
我首先尝试了直接在&lt;code&gt;pelicanconf.py&lt;/code&gt;中直接添加&lt;code&gt;GOOGLE_CUSTOM_SEARCH_NAVBAR&lt;/code&gt;这一条属性，结果在&lt;code&gt;make html&lt;/code&gt;之后，左上角的search框，在参考了lizhurui的博客代码后，我是这样实现的。  &lt;/p&gt;
&lt;h3&gt;添加google站内搜索&lt;/h3&gt;
&lt;h4&gt;修改主题：&lt;/h4&gt;
&lt;p&gt;找到这个主题（&lt;code&gt;tuxlite_tbs&lt;/code&gt;）的templates文件夹中的&lt;code&gt;base.html&lt;/code&gt;，在这个div(&lt;code&gt;&amp;lt;div class="nav-collapse"&amp;gt;&lt;/code&gt;)的最后，添加以下内容：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-search pull-right&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/search.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search-query&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新pelican的主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-themes -U .../tuxlite_tbs
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建search.html&lt;/h4&gt;
&lt;p&gt;之后，在output目录下，新建一个名为search.html的文件，写入下面的内容，其中需要你自己修改的是google站内搜索的ID号，需要自己在&lt;a href="https://www.google.com/cse/"&gt;google站内搜索&lt;/a&gt;的网站上自己申请。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zh_CN&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;站内搜索&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nf"&gt;#search-box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#search-form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#search-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#search-box&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;search-box&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/search.html&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;search-form&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;get&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_top&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;search-text&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Search&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width: 100%;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Loading&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.google.com/jsapi&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zh-CN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;V2_DEFAULT&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOnLoadCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;customSearchOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;customSearchControl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CustomSearchControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;012191777864628038963:**********&amp;lt;!写入你申请的google站内搜索的ID号&amp;gt;）&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customSearchOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;customSearchControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setResultSetSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FILTERED_CSE_RESULTSET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DrawOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enableSearchResultsOnly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
    &lt;span class="nx"&gt;customSearchControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseParamsFromUrl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x26&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;keyValuePair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
            &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;keyValuePair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseParamsFromUrl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;queryParamName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;queryParamName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;customSearchControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;queryParamName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;生成html，发布&lt;/h4&gt;
&lt;p&gt;将这个html文件保存在output目录（网站的根目录）下，执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，搜索框就出来了。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="http://www.guozhongxin.com/images/searchwithgoogle.png" /&gt;&lt;/p&gt;
&lt;p&gt;为了让google站内搜索功能更好的工作，你可在google站长工具中提交你的sitemap（这个可以在pelicanconf.py中配置sitemap插件，着执行make html后能自动生成）。&lt;/p&gt;
&lt;h4&gt;提交sitemap&lt;/h4&gt;
&lt;p&gt;引入sitemap插件的工程见lizherui的日志。这样在&lt;code&gt;make html&lt;/code&gt;之后就能生成sitemap.xml文件，提交到google站长上，搜索就可以生效了。  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;添加百度站内搜索&lt;/h3&gt;
&lt;p&gt;虽然实现了google站内搜索的功能，但是由于GFW的原因导致实际在使用google站内搜索时加载太慢，最终，我还是无奈的选择了百度站内搜索。。。  &lt;/p&gt;
&lt;h4&gt;注册&lt;/h4&gt;
&lt;p&gt;在&lt;a href="http://zhanzhang.baidu.com/"&gt;百度站长平台&lt;/a&gt;中注册一个账号，之后添加网站，按照提示验证网站。&lt;br /&gt;
之后左侧&lt;code&gt;其他工具&lt;/code&gt;中找到&lt;code&gt;站内搜索&lt;/code&gt;，按照提示填写基本信息，选择搜索框样式，之后点击&lt;code&gt;查看代码&lt;/code&gt;，复制其中内容，留用。  &lt;/p&gt;
&lt;h4&gt;修改主题&lt;/h4&gt;
&lt;p&gt;同样在&lt;code&gt;base.html&lt;/code&gt;的这个个div(&lt;code&gt;&amp;lt;div class="nav-collapse"&amp;gt;&lt;/code&gt;)的最后，新建一个&lt;code&gt;div&lt;/code&gt;，刚才注册最后复制的代码粘贴到这个&lt;code&gt;div&lt;/code&gt;中： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-search pull-right&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;  
        &lt;span class="cp"&gt;&amp;lt;!略&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新pelican的主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-themes -U .../tuxlite_tbs
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;生成html，发布&lt;/h4&gt;
&lt;p&gt;同上  &lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="http://www.guozhongxin.com/images/searchwithbaidu.png" /&gt;&lt;/p&gt;
&lt;h4&gt;提交sitemap&lt;/h4&gt;
&lt;p&gt;在百度站长工具里提交sitemap的过程和google的类似，需要注意的是百度有自己的&lt;a href="http://zhanzhang.baidu.com/wiki/170#_2什么是sitemap索引文件？"&gt;sitemap格式&lt;/a&gt;，直接用lizherui日志中的方法生成的sitemap.xml不符合百度的要求：  &lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="http://www.guozhongxin.com/images/sitemapofbaidu.png" /&gt;&lt;/p&gt;
&lt;p&gt;百度sitemap要求有&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;data&amp;gt;&amp;lt;display&amp;gt;&amp;lt;/display&amp;gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而我们使用的sitemap工具里没有这个，需要手动的对这个插件进行修改.&lt;/p&gt;
&lt;h4&gt;配置符合百度站内搜索规则的pelican sitemap插件&lt;/h4&gt;
&lt;p&gt;找到&lt;code&gt;.../pelican-plugins/sitemap/sitemap.py&lt;/code&gt;，找到全局变量&lt;code&gt;XML_URL&lt;/code&gt;，将其修改为以下形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;XML_URL = &amp;quot;&amp;quot;&amp;quot;
&lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;loc&amp;gt;&lt;/span&gt;{0}/{1}&lt;span class="nt"&gt;&amp;lt;/loc&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{2}&lt;span class="nt"&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;changefreq&amp;gt;&lt;/span&gt;{3}&lt;span class="nt"&gt;&amp;lt;/changefreq&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;priority&amp;gt;&lt;/span&gt;{4}&lt;span class="nt"&gt;&amp;lt;/priority&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;data&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;display&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/display&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，重新&lt;code&gt;make html&lt;/code&gt;就能生成一份符合百度站内搜索的sitemap.xml。将其提交到百度站内搜索“提交数据”中，等待百度验证之后，就能体验百度站内搜索功能。&lt;/p&gt;
&lt;p&gt;在这里吐槽一句，百度的站长工具确实不如google webmasters，同样是提交sitemap，google可以做到立即生效，百度的要等至少一个小时。如果没有GFW，才懒得用百度的呢。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;添加Tags链接&lt;/h2&gt;
&lt;p&gt;在其他一些pelican主题中，看到有标签云，想到Tags的链接可能比Categories的链接更有用，通过更改主题，添加了侧栏中红框内的Tags链接框。&lt;/p&gt;
&lt;h4&gt;修改主题&lt;/h4&gt;
&lt;p&gt;还是找到&lt;code&gt;base.html&lt;/code&gt;，找到categories部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;well&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;padding: 8px 0; background-color: #FBFBFB;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav nav-list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    Categories
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;null&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;                   
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看到这一部分的代码之后，很容易仿写tags链接框的部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;well&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;padding: 8px 0; background-color: #FBFBFB;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav nav-list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    Tags
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将tags代码添加到categories框之后。执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-themes -U .../tuxlite_tbs
make html
make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时，你就能看到左侧栏出现的TAGS链接框了。&lt;br /&gt;
&lt;img alt="4" src="http://www.guozhongxin.com/images/tags.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上这不是一个能体现tag出现频次的tag云，小弟实在没学过前端技术，大神看到有感兴趣的可以提出解决的方法。&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category><category term=""></category></entry></feed>